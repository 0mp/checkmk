Konzept für Verwaltung von Benutzern und Rollen
-----------------------------------------------

User: HTTP-Login. Ein User *kann* gleichzeitig ein Nagios-Kontakt sein.
Rolle: Eine Ansammlung von Berechtigungen ohne Objektbezug.
Kontaktgruppe: Eine Nagios contactgroup: Liste von Usern, Zugeordnet zu 
  Hosts und Services.

Ob ein Benutzer mehrere Rollen haben kann, ist noch nicht geklärt. Falls
ja, wären seine Rechte einfach die Summe der Rollenrechte. Normalerweise
sind die Rollen aber sowieso nach dem Zwiebelprinzip gebaut (root ->
admin -> user -> gast).

Attribute eines Benutzers:

  Login                          Nagios 'contact_name'
  Password (verschlüsselt?)
  Voller Name "Harri Hirsch" --> Nagios 'alias'
  Rolle / Rollen
  -------
  Falls es ein Nagios-Kontakt ist, gibt es noch weitere Attribute:

  Kontaktgruppen
  Email-Adresse
  ... weitere Felder evtl. analog zu den Hostattributen per Plugin
      nachpflegbar. Man könnte evtl. sogar direkt auf die Hostattribute
      zugreifen.

  ... Einstellungen, die der Benutzer evtl. sogar selbst ändern kann:
  Notifikation-Options für Hosts und Services getrennt
  Notifikation-Period
  Notifikations-enabled

  Die Benachrichtungen selbst sollten über ein Standardskript laufen,
  das wir mit ausliefern. Wenn alternative Wege als Email eingesetzt
  werden, kann man das in dem eigenen System regeln und braucht dazu
  nicht die Nagios-Konfiguration zu bemühen. Wichtig ist aber, dass
  wenn Nagios eine Notifikation tatsächlich versendet (Nagios-Log),
  dass dann auc heine Rauskommt. Deswegen müssen die obigen drei
  Einstellungen über Nagios verwaltet werden. Wenn der Benutzer diese
  selbst ändern können soll, muss man dafür Nagios durchstarten.
  Irgendwie doof. Oder wir schaffen es durch das "adaptive monitoring"
  von Nagios zur Laufzeit diese Werte zu ändern.

-> Implementierungsplan:

* mode_users -> Zeigt Tabelle aller User. 
** load_users() und save_users() -> multisite.d/users.mk 
   Nagios-Benutzer müssen aber in conf.d/wato/contacts.mk gespeichert
   werden?? 

define_contacts = {
    "harri" : {
        "alias" : "Harri Hirsch",
        "contact_groups" : [ "admin", "linux" ],
        "notification_period" : "7x24",
        "host_notification_options": "wfde",
        "service_notification_options" : "rwc",
        "email" : "mk@harri.hirsch",
        "attributes" : {
            "seppl" : 5,
        }
    }
}

In multisite.d/users.mk wird weiterhin gespeichert:

users = {
    "harri" : {
        "roles" : [ "admin", "guest" ],
        "password" : "2938ru8923fj892rf",
        "disabled" : True,
    }
}

-> Beide dicts werden beim Laden zusammengeführt und beim Speichern
wieder aufgespalten. Multisite lädt für den eigenen Bedarf nur
die users.mk, bzw. wird die ja automatisch geladen.

Beim Speichern wird außerdem die Datei htpasswd rausgeschrieben.
Diese Datei wird in defaults referenziert. Das normale setup.sh
kennt die Datei ohnehin. Bei OMD bauen wir es in die Defaults
ein.


