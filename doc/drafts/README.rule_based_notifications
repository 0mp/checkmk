Starting point: Check_MK's "Flexible Notifications" are to a decent degree
more flexible than Nagios' builtin notification system.  There are some
situations, however, where even more flexiblity is desirable. Furthermore -
if you have a larger number of users - the configuration of the notification
profiles for each user is very inconvenient.

This white paper suggests a new notification system that tackles these problems
and is easily extendable in the future.

RULE BASED NOTIFICATIONS
------------------------
The basic idea is that notifications are processed by a rule based engine -
very similar to the "Event Console". A notifcation is in the first place
independent of an actual user. It is handled as follows:

1. The monitoring Core (Nagios/Icinga/CMC) creates a host or service *Alert*.

2. The monitoring core notifies the global contact called "checkmk-notify" 
   about the alert.

3. This contact has "cmk --notify" configured as its notification command. By
   means of an environment variable it gets the list of contacts of the object
   for later reference. The actual contacts themselves have notifications disabled.
   This avoids duplicate notifications.

4. Now the notification goes through a chain of notification rules, which
   can be edited via WATO (similar to the one in the Event Console). One difference
   to the EC is, that in the notification system *all* rules will be applied,
   even if a previous rule already matched. That is important in order to have
   more then one notification being sent.


RULES
-----
The rules have a structure similar to those in the Event Console. They are
edited by a dedicated WATO module. Each rule consist of a condition
and a notification action.

The condition can be formed of:
* whether a certain timeperiod is currently active
* the notification number (i.e. phase of escalation)
* the service level (a number that can be attached to each host/service)
* the event type (up, down, ok, crit, etc.)
* a host specification like in WATO rules (using host tags, etc.)
* a service specification using regular expressions (like in WATO rules)

Further conditions that we can think of are:
* The original state or the complete state transition (e.g. CRIT -> WARN vs. OK -> WARN)
* the type of the check plugin, e.g. only checks of type "if" or "if64"
* whether the host or service is contained in a certain host/service group
* whether it's contained in a certain contact group
* whether it has a certain contact
* the value of a certain user-defined custom variable

If all conditions of a rule are fullfilled, it matches
and its action is executed. The action consist of:

* Who should be notified?
  a) all contacts of the host/service
  b) an explicit list of contacts
  c) all members of a certain contact group
  d) an explicit email/pager address
  e) all contacts

* Which plugin should be used for notification? (email, sms, pager, etc.)

* The parameters of that plugin

Note: the action is not immediately executed but added to the list of planned
notifications. This list consists of triples of the following structure:

   Contact, Plugin, Parameters

Also each rule has a checkbox:
 [ ] allow users to deactivate this notification


CANCELLING RULES
----------------
In ord to be able to better configure exceptions there could be a second
type of rules: cancelling rules. They have the same structure as the normal
rules when in comes to conditions.  Also the selection of the contacts is
the same. The plugins section is now not a choice of once, but a list of
checkboxes where several plugins can be selected. No plugin parameters need
to be confiured here.

When a cancelling rule matches then all previously selected notifications
to the specified users with the specified plugins are cancelled. Such a rule
could mean e.g.  "Do not notifiy Hubert during the Weekend via SMS".

The order of the normal and cancelling rules is honored.  Example:

Rule 1 ...
Rule 2 ...
Rule 3 -> create Notification to A and B with plugin P
Rule 4 ...
Rule 5 -> cancel notifcation to B via plugin P

--> only A is going to be notified with P

Note: Since always *all* Rules are applied - even if one already matched -
you need to specify the exceptions *after* the general case. This is the
opposite way as in the Event Console.

Normal rules and cancelling rules can follow each other in an arbitrary
order. That way you can first create a notifcation to all contacts, then
remove a list of contacts and finally add again one single contact to the
notification list.

After all rules have been tries and the notifcation table is finalized,
all notifications are being sent out. Duplicates are removed, of course.


USER-RULES
----------
We want to keep the current feature that a user is able to configure
is notifications himself. Therefore each user has his/her own chain of
notification rules. They have the same structure as the global ones except
that the user cannot specify any contact other then himself as a target.

The user rules are always executed after the global rules. As state above
a notification created by a global rule can be locked against a cancelling
by the user.

User user can:
- add notifications
- cancel notifications that have their origin in global rules

Note: that way a user can "subscribe" to notifications of certain hosts
and services - regardless of whether he is a contact of that object in
the monitoring.


FALLBACK
--------
When a notification is matched by no rule then - as a fallback - an
email is being sent to a globally configured address - to make sure
that no notifiation is being lost due to a misconfiguration.


IMPLEMENTATION IN WATO
----------------------
Within WATO the new notifcation system looks like this:

* A new global option enabled the "Rule based Notifications".
  In some future release that option might be removed together
  with the current "Flexible Notifications". In the first version
  this defaults to "off".

* If they are enabled, then the notification options in the users
  settings of all users change. The current block of options is
  completely being removed. Instead a new button "Notifications"
  will bring the user/admin to the user-owned chain of notification
  rules. There is no switch for enabling/disabling notifications
  anymore. This can be done by a rule, if needed.

* If currently there are alrady flexible notifications configured,
  they will *not* be converted. But they are kept in the configuration
  in case you switch the rule based system off again later.

* A new WATO module shows the global notification rules. That is
  almost identical with that of the user specific rules.

  In the module you can create, modify and delete rules and change
  their order - just like in the Event Console. We also can create
  a simulation field for trying out the rule chain.


IMPLEMENTATION IN CHECK_MK
--------------------------
cmk --notify needs to detect a rule based notifcation. It is then
executing the chain of rules, which is saved the usual way in
configuration variable of check_mk (like in main.mk). In addtion
all user specify rules are being applied.

In notify.log you get an exact documentation, why which rule triggered
or not (presumed you have a high enough log level).

During the configuration generation for Nagios/CMC a special user
needs to be created who is contact for everything.


Specific implementation tasks
-----------------------------
A) WATO

[1] Create a new WATO module where a table of notification rules can be edited:
    a) load_..() and save_() functions that read and write conf.d/wato/notifications.mk.
    b) display the table of current notification rules with icons for edit/clone/delete
    c) functionality of deleting a rule
    d) arrows for changing the order of the rules
    e) a mode of the page that edits a user's specific rule
    f) a mode of the page that shows all global and all users rules

[2] Page for editing the details of one notification rule
    a) support the modes new, clone and edit
    b) edit all of the supported conditions (similar to EC)
    c) edit supported outcome types
    d) alternatively edit a cancelling rule
    e) special mode for editing a user's rule
    f) Checkbox for allowing users to deactivate this notification

[3] Global settings: new option of enabling rule based notifications. The
    default value is off. In some future we will default this to on.
    The settings allow to configure a default email address. If this is
    set, it will receive notifications in cases where no rule matches.

[5] New WATO permission for the permission to create own notification rules.

[6] User settings: When rule based notifications are turned on, then
    complete section "Notifications" is being dropped. Instead a button
    "Notifications" appears where the admin can edit the individual rules
    for that user. Storage of these rules directly in the contacts
    definition in conf.d/wato/contacts.mk.

[7] Personal settings: button for editing the personal notification rules,
    if this is allows.



B) CONFIGURATION CREATION

[11] Nagios configuration: When the rule based notifications are turned on, then
     a) A new dummy contact "checkmk-notify" is being created
     b) That contact is contact of all host/services
     c) That contact has cmk --notify has its command, just as with the flex nots.
     d) all timeperiods and options are set to "on"
     e) add the list of contacts of a host/service to the environment variables

[12] CMC configuration: It sets a new CMC global variable to rule based notifications
     No dummy contact is being created.


C) CHECK_MK MICRO CORE

[21] If rule based notifications are turned on, then the CMC does
     a) send *one* notification regardless of the contacts of an object
     b) set additional variable for the affected contacts
     c) creates a logfile entry in the history that reflects this


D) NOTIFICATION

[31] The cmk --notify know rule based mode from the global variable

[32] It loads all global rules and all user specific rules from global
     contacts-variable.

[33] Process the rules:
     a) check the rule condition while taking into account the notification context
     b) positive rule: build up the notification table
     c) negative rule: cancel notifications
     d) notification debugging turned on: explain, why rules match or don't match

[34] If no rule has matched then create one default notification with the plugin
     email to the global default email address.

[35] Execute the resulting notification plugins like in the current notification
     system. Take logging and spooling into account.

[36] Take email-Adresses, users aliases and names from the contacts variable, as
     they are not available in the notification context.



