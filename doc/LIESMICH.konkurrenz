Lilac Platform
--------------
Hiess mal fruity. Hier kann man webbasiert Nagios 
konfigurieren. Man kann Schablonen fuer Hosts definieren,
die dann auch eine Liste von Services beinhalten.

Hat ein AutoDiscovery. Dazu wird das Netzwerk mit nmap
durchsucht. Nmap stellt das OS fest. Darueber kann man
den neuen Hosts automatisch eine Hostschablone zuordnen.
Jetzt wird noch gescannt, welche Netzwerkdienste dieser
Host anbietet. Diese Daten koennen dann automatisch in
Lilac uebernommen werden, um das zu monitoren.

Kritik

 - Kunden wollen selbst aktiv entscheiden, welche Hosts
   gemonitort werden sollen. Das Scannen noch *Hosts* ist
   IMHO nicht sehr nuetzlich. 

 - Man bekommt nur Netzwerkdienste. Lokale Dinge bleiben
   aussen vor. Wenn man die haben will, braucht man immer
   einen Agenten, den man aktiv installieren muss. Dann
   ist aber das automatische Finden von Hosts nutzlos.

-> Keine Hilfe im Rechenzentrum, evtl. interessant in einer DMZ


check_multi
-----------
Check Multi fasst mehrere Checks zu einem logischen Check
zusammen. Der logische Check ist der eigentliche Nagioscheck.
Der Status ist der "schlimmste" Status der Einzelchecks (wie
bei der Aggregation von check_mk). Die Performancedaten kommen
dann als Liste der Daten von allen Einzelchecks und werden
dann folglich auch alle gemeinsam in eine Round-Robin-Datenbank
eingetragen (oder?). Die Variablen sehen dann z.B. so aus:
check_muli::check_disk::/=9579MB;11489;11852;0;12094

Kritik

 - Im Gegensatz zur Aggregation von check_mk kann nur ueber
   den Gesamstatus notifiziert werden.

 - Die Performancedaten werden gemeinsam erfasst. Auch gibt
   es im Nagios nur einen gemeinsamen Check. Es ist daher 
   nicht einfach, die Daten wieder getrennt darzustellen.

 - Was passiert mit der RRD, wenn ein Check hinzukommt?
   PNP4Nagios legt doch die Datenbank an, wenn zum ersten
   mal Daten zu dem Check kommen. Variablen spaeter hinzufuegen
   ist nicht moeglich? Und wenn welche wegfallen? Die Performance-
   Daten muessen ausserdem durch Nagios durchgeschleust werden.

 - Man braucht auf dem Zielhost eine Konfigurationsdatei,
   in der genau festgelegt wird, was gecheckt wird. Diese 
   ist genauso kompiliziert (und analog aufgebaut) wie
   die von NRPE.

 - Man braucht auf dem Zielhost fuer die Einzelchecks die
   klassischen Nagios-Plugins - also das Problem mit den
   Binaerdateien

 - Bei Windows muss man ein anderes Verfahren waehlen und
   die check_multi-Emulation von NSCLient++ benuetzen.


Vorzuege

 - Im Gegensatz zu check_mk produziert man aus Sicht von
   Nagios nur einen Einzelcheck pro item. Damit ist das
   Nagios performanter, weil es weniger Checks verwalten
   muss.

 - Man kann Checks hinzufuegen, ohne Nagios neu starten
   zu muessen.

GroundWork Monitor Architect
----------------------------
Weboberflaeche zur Konfiguration Nagios. Ist sehr nahe
an der Logik von Nagios. Man kann scheinbar Schablonen
fuer Hosts definieren. Bezeichnet sich selbst als Beta.
Von Autoerkennung habe ich nichts gefunden, aber auch
nur kurz geschaut.
