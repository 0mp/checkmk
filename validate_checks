#!/usr/bin/python

import os, sys

on_tty = sys.stdout.isatty()

if on_tty:
    tty_black     = '\033[30m'
    tty_red       = '\033[31m'
    tty_green     = '\033[32m'
    tty_yellow    = '\033[33m'
    tty_blue      = '\033[34m'
    tty_magenta   = '\033[35m'
    tty_cyan      = '\033[36m'
    tty_white     = '\033[37m'
    tty_bgred     = '\033[41m'
    tty_bggreen   = '\033[42m'
    tty_bgyellow  = '\033[43m'
    tty_bgblue    = '\033[44m'
    tty_bgmagenta = '\033[45m'
    tty_bgcyan    = '\033[46m'
    tty_bgwhite   = '\033[47m'
    tty_bold      = '\033[1m'
    tty_underline = '\033[4m'
    tty_normal    = '\033[0m'
    tty_ok        = tty_green + tty_bold + 'OK' + tty_normal
    tty_error     = tty_red + tty_bold + 'ERROR' + tty_normal
else:
    tty_black     = ''
    tty_red       = ''
    tty_green     = ''
    tty_yellow    = ''
    tty_blue      = ''
    tty_magenta   = ''
    tty_cyan      = ''
    tty_white     = ''
    tty_bgred     = ''
    tty_bggreen   = ''
    tty_bgyellow  = ''
    tty_bgblue    = ''
    tty_bgmagenta = ''
    tty_bgcyan    = ''
    tty_bold      = ''
    tty_underline = ''
    tty_normal    = ''
    tty_ok        = 'OK'
    tty_error     = 'ERROR'



__name__ = 'asd'
defaults_path = 'defaults'
autochecks = []
execfile('check_mk')
__name__ = '__main__'

def get_checks():
    return [ l for l in os.listdir('checks') if not l.startswith('.') ]

def check_has_perfdata(check):
    return check_info[check][2] == 1

def get_all_checks():
    k = check_info.keys()
    k.sort()
    return k

def is_snmp_check(check):
    return check in snmp_info or check in snmp_info_single

# Load all checks
for check in get_checks():
    execfile('checks/%s' % check)

SCORE_START = 10
C_OK      = 1
C_FAILED  = 2
C_INVALID = 3
TESTS = { 'manpage': C_OK, 'snmp_scan': C_OK, 'pnp_tmpl': C_OK, 'pnp_rra': C_OK, 'snmp_scan': C_OK }
WEIGHT = { 'manpage': 2 }

#
# Check definitions
#

def is_valid_manpage(check):
    return True

def verify_manpage(check):
    return os.path.exists('checkman/%s' % check)

def is_valid_snmp_scan(check):
    return is_snmp_check(check)

def verify_snmp_scan(check):
    return check in snmp_scan_functions

def is_valid_pnp_tmpl(check):
    return check_has_perfdata(check)

def verify_pnp_tmpl(check):
    return os.path.exists('pnp-templates/check_mk-%s.php' % check)

def is_valid_pnp_rra(check):
    return check_has_perfdata(check)

def verify_pnp_rra(check):
    return os.path.exists('pnp-rraconf/check_mk-%s.rra.php' % check)

#
# 1) Perform checks
#
results = {}
for check in get_all_checks():
    score         = SCORE_START
    check_results = TESTS.copy()

    for test in TESTS.keys():
        if eval('is_valid_%s(\'%s\')' % (test, check)):
            if not eval('verify_%s(\'%s\')' % (test, check)):
                check_results[test] = C_FAILED
                score -= WEIGHT.get(test, 1)
        else:
            check_results[test] = C_INVALID

    results[check] = (score, check_results)

#
# 2) Sort by score
#
import operator
results = sorted(results.iteritems(), key=operator.itemgetter(1))

#
# 3) Output the results
#
sys.stdout.write('%-25s' % 'Check')
for f in TESTS.keys():
    sys.stdout.write('%-15s' % (f+' (%d)' % WEIGHT.get(f, 1)))
sys.stdout.write('%-8s' % 'Score')
sys.stdout.write("\n")
for check, (score, check_results) in results:
    if score == SCORE_START:
        color = tty_green
    elif score == 9:
        color = tty_yellow
    else:
        color = tty_red

    sys.stdout.write('%s%-25s%s' % (color, check, tty_normal))

    for f in TESTS.keys():
        if check_results[f] == C_FAILED:
            sub_color = tty_red
            label = ':-('
        elif check_results[f] == C_INVALID:
            sub_color = tty_normal
            label = ''
        else:
            sub_color = tty_green
            label = ':-)'

        sys.stdout.write('%s%-15s%s' % (sub_color, label, tty_normal))

    sys.stdout.write('%s%-8s%s' % (color, score, tty_normal))
    sys.stdout.write("\n")
