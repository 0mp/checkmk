Livestatus: neben custom_variable_names und custom_variable_values waere
noch custom_variables huebsch, welches beides kombiniert.

Disk IO read/write: Zu einem Check zusammenfassen. Einen gemeinsamen Graphen
mit dem Windows-Check erstellen (wo ein Graph eh fehlt).

Multisite: Quicksearch evtl. case-insensitive machen?

Multisite: Für die Alerts-Stats braucht man noch die Möglichkeit,
*nach* dem Sortieren ein Limit zu setzen. Das kann auch für andere
Dinge nützlich sein. Implementierung einfach über eine view property.

Livestatus: Filter, welche auf Gruppen angewendet werden. Beispiel:
Eine Anfrage, die die Alert-Statistiken erzeugt aber nur Datensätze
ausgibt, welche mindestens ein Problem haben.
GroupFilter: col_1 > 0

Multisite: Filter, der Hosts zeigt, die entweder selbst Summary hosts sind
oder keinen haben.

Idee: Checks, die eigentlich keine Perfdaten liefern, könnten über eine
Konfiguration künstlich perfdaten bekommen, ala status=0, status=1 etc. Das
könnte man über eine Regel konfigurierbar machen: fake_perfdata = [ ... ]

Idee: Inventurcheck könnte gleich die Checkergebnisse berechnen

local-Struktur: Hier gibt es scheinbar einen Bug in mod_python.
index.py -> execfile(plugins/pages/...) -> import config
Jetzt bekommt man eine neue Instanz von config. In dem importierten
Modul kann man das wie folgt reparieren:
from mod_python import importer, apache
config = importer.import_module("config", 
    path = ["/omd/sites/webconf/share/check_mk/web/htdocs"])
Das kann aber doch keine Lösung sein. Andererseits braucht man
dies nur wenn wenn in config was ändert oder bei livestatus
(wegen der persistenten Verbindungen). Sonst kanns einem egal
sein, wenn man ein neues Modul bekommt.

Snapins: die letzten 10 Notifikationen, die letzten 10 Alerts
(evtl. umschaltbar per Tabs)

Acknowledgements: Ankreuzung, ob persistent oder nicht
Hm. Komisch. Im Code sehe ich, dass ich für persistent eine 0
setzen. Trotzdem bleibt das Acknowledgment über einen Nagios-
Neustart erhalten.

Tactical Overview: Man könnte folgendes machen: Die Kästchen
enthalten ja Links zu Views, welche die entsprechenden Probleme
anzeigen. Man könnte jetzt den Spieß umdrehen und aus den Views
die Filter-ausdrücke rausholen und diese für die Anfragen 
verwenden (und dort nur noch ein Stats: und ein Filter: has_been_ack = 0
anhängen). Somit wäre die Logik von Tactical Overview konfigurierbar.

Bei den Views z.B. im Titel die Anzahl der Antwortzeilen der Anfrage
anzeigen - Generell und bei jeder View. Bei Gruppierten Views evtl.
die Anzahl der Gruppen? Dann wüsste man die Zahl aber erst nach dem
rendern. Also geht das nicht...

if-Check: Die Bandbreiten-Erkennung klappt manchmal nicht, z.B.
weil der Provider die Bandbreite runterregelt. In den Check-Params
sollte man die tatsächliche Bandbreite angeben können.

SNMP: Hier könnte man weiter Parameter konfigurierbar machen,
z.B. snmp_parameters = []. Auf die Art kann man auch z.B. eine
alternative Portnummer angeben.
