Icinga 1.0.1 mit Livestatus hing nach dem Beenden in futex:

# strace -p 25739
Process 25739 attached - interrupt to quit
futex(0x7fb7f4d399f4, FUTEX_WAIT_PRIVATE, 2, NULL
        
(gdb) bt
#0  0x00007fb7f4abc76e in ?? () from /lib/libc.so.6
#1  0x00007fb7f4a63f3d in ?? () from /lib/libc.so.6
#2  0x00007fb7f4a63cf7 in ?? () from /lib/libc.so.6
#3  0x00000000004408df in get_datetime_string ()
#4  0x0000000000431acc in grab_datetime_macro ()
#5  0x0000000000434085 in grab_macrox_value ()
#6  0x00000000004348b3 in set_macrox_environment_vars ()
#7  0x00000000004348ed in set_all_macro_environment_vars ()
#8  0x0000000000419313 in run_async_host_check_3x ()
#9  0x000000000041b50f in run_scheduled_host_check_3x ()
#10 0x000000000041b6ba in perform_scheduled_host_check ()
#11 0x000000000042b44b in handle_timed_event ()
#12 0x000000000042b8a1 in event_execution_loop ()
#13 0x0000000000413ef2 in main ()

--> Haenger ist wahrscheinlich abhaengig von dem Setzen
der Umgebungsvariablen.


Doku zu Livestatus: xinetd-Beispiel mit geschewiften Klammern
geht nicht. Beispiel ohne Klammern einbauen

Hostgroups (Summary): Das Feld wie die Pending hosts stehen,
    ist grün statt grau und die Überschrift ist "Un" statt "Pe"

In Frameset: header("Cache-Control: max-age=7200, public"); 

Windows-Agent: Speicherberechung von Swap anpassen und Check mem entsprechend
anpassen, dass er TotalPage und UsedPage verwendet. Im Quellcode ist das schon
drin, der Check muss angepasst werden und auch die Schablone. Evtl. macht
man einen eigenen Check. Oder man löst es über das Check-Item.

Die Tactical overview blendet nicht die Services aus, die gerade in Downtime
sind. Wenn man aber auf die Zahl klickt, kommt man zu einer View, die diese
(korrekt) ausblendet.

Die impliziten Services Check_MK und PING und evtl. legacy_checks auch durch
die Konfigmaschine laufen lassen, damit Servicegruppen etc auch funktoinieren
(auch Inventory-Checks).  PING: service_notification_period und andere
Eigenschaften wie Gruppen, etc werden eicht berücksichtigt. Gleiches gilt
für Servicegruppen. Man sollte daher die Funktion extra_service_conf_of()
so erweitern, dass *alles* Nagios-Attribute agbefrühstückt werden.

Multisite: die reloads in der Sidebar müssen unbedingt *asynchron*
laufen. Ansonsnten hängt der Browser immer wieder, wenn die Verbindung zu
einem Site langsam ist.

--------------------------------------------------------------------------------
UNSCHOENHEITEN
--------------------------------------------------------------------------------
Tabledarstellung mit Gruppen: Hier klebt der Gruppenkopf zu dicht
an der vorherigen Gruppe.

Multisite: Zeitanzeige der Downtimes (ende) zu ungenau.  "in 6 hrs" ist
blöd. Auch bei Start "19 sec" ist dumm, hier wäre besser (vor 19 sec). Oder
bei Downtimes immer absolute Zeiten angeben? Evtl. Zusatzspalte der Duration.

logwatch.php und die anderen htdocs/* -Dateien rausschmeissen, nicht mehr
installieren. Im setup auch das Eintragen von var_dir entfernen. Eventuell
vorher oben einen Text einbauen mit Link auf das neue Logwatch.

snmp_communities: dictionary nicht mehr verwenden, aus Doku raus, Defaultwert
leere Liste, aus Code raus, Hinweis im ChangeLog. Evtl einen Test mit
Abbruch, wenn immer noch type ist dict.

Multisite: Bei Änderungen an der Konfigdatei (debug) muss man komischerweise
Apache neu starten....

--------------------------------------------------------------------------------
IDEEN & VERBESSERUNGEN
--------------------------------------------------------------------------------
Multisite: icons: das Erkennen der modified_attributes
funktioniert nur halb: Wenn man den Ausgangswert wiederherstellt,
bleibt das Attribut trotzdem modified...
Kann man die modified attributes beim Nagios so einstellen,
dass diese *nicht* bei einem Restart gespeichert werden?
Sonst werden sie nie zurückgesetzt. Oder kann man das evtl.
mit einem Kommando machen? 

Ja => CHANGE_SVC_MODATTR;<host_name>;<service_description>;<value>
Eine Datei local.mk, die von backup/restore *nicht* beruecksichtigt wird.

Tactical overview: Könnte man evtl. einfach die Datenquellen und Filter
von bestehenden Views verwendenden? Dann wäre darüber auch die Sache
konfigurierbar?? Auch gut wäre eine Möglichkeit, wie sich sidebar-snapins
eine Konfiguration merken und Konfigdialog aufmachen können.

Multisite: Bei einer bestehenden View muss man die Datenquelle umstellen
können, zumindest wenn die neue Datenquelle alle Spalten unterstützt,
die aktuell verwendet werden (und Filter).  Man muss z.B. von hostgroups
auf hostgroups_merged umstellen können. Alles andere ist viel zu umständlich.

Cluster: Wenn der Clustername einer IP-Adresse zugeordnet ist (
einfach mit Check_MK-Mitteln Adresse ermitteln aus gethostbyname/ipaddresses),
dann:
 * IP in address eintragen anstelle von 0.0.0.0
 * check-mk-ping als Hostcheck verwenden

Edit view: die Spaltenzahl ist zu niedrig.

Inventur von Linux-NICs: Nur verwendete Karten monitoren.

Doku Windows:

C:\> lodctr /s:c:\counter.txt
==> Holt aus der Registry die Namen und Beschreibungen der
ganzen Performancecounter :-)

Die Option -d verwendet --cache nicht.

Searcher für last_checked

Anstelle der Pipe direkt checkresults-Dateien schreiben

check_mk -R koennte statt restart ein reload machen.
Oder eine eigene option, check_mk -O?
