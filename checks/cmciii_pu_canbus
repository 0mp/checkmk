#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_cmciii_pu_canbus(info):
    inventory = []
    for oid_num in range(0, len(info[0])):
        if re.match('.*DescName$',info[0][oid_num]):
            item = re.sub('.DescName$', '', info[0][oid_num] )
            inventory.append((item, None))
    return inventory

def check_cmciii_pu_canbus(item, params, info):
    for oid_num in range(0, len(info[0])):
        if re.match(item,info[0][oid_num]):
            descr = info[1][oid_num]
            value = re.sub(" ","",info[1][oid_num+1])
            crit = info[1][oid_num+2].split(" ")[0]
            warn = info[1][oid_num+3].split(" ")[0]
            status = info[1][oid_num+5]
            if status.lower() == "ok":
                state = 0
            else:
                state = 2
            infotext =  "%s: %s (%s/%s), Status %s" \
                % ( descr, value, warn, crit, status )
            perfdata = [ ("current", value, warn, crit, 0 ) ]

            return (state, infotext, perfdata)

    return(3,"no valid SNMP data found for unit")


check_info['cmciii_pu_canbus'] = {
    "check_function"      : check_cmciii_pu_canbus,
    "inventory_function"  : inventory_cmciii_pu_canbus,
    "has_perfdata"        : True,
    "service_description" : "PU %s",
    "snmp_scan_function"  : lambda oid: oid(".1.3.6.1.2.1.1.1.0").startswith("Rittal") and \
                                oid(".1.3.6.1.4.1.2606.7.4.2.2.1.3.1.39").startswith("System.CAN1 Current.DescName"),
    "snmp_info"           : (
      ".1.3.6.1.4.1.2606.7.4.2.2.1", [ "3.1", "10.1" ], [OID_END]+range(39,52)
    )
}

