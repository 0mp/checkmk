#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

def cisco_sensor_item(trial_string, fall_back):
    trial_string = trial_string.lstrip() # remove leading spaces which might be provided via SNMP

    # trial_string can be:
    # Empty
    # A single string
    # A string seperated by commas with status information
    # -> Depends on the device model
    try:
        # Try to handle all cases found in mkzeug/walks
        splited = [ x.strip() for x in trial_string.split(',')]
        if len(splited) == 1:
            item = trial_string
        # If the last part contains # or Power, take the complete string
        elif '#' in splited[-1] or 'Power' in splited[-1]:
            item = " ".join(splited)
        # If second last part start with Status, remove that part
        elif splited[-2].startswith("Status") or splited[-2].startswith("PS1"):
            item = " ".join(splited[:-2])
        # Take anything, but without last part
        else:
            item = " ".join(splited[:-1])
        # Maye there a multiple Items, but always the same string.
        # Try to prevent that by adding the fall_back number to the end
        if not item[-1].isdigit():
            item += " "+ fall_back
        # Replace unwanted chars and return
        return item.replace('#',' ')
    except:
        return fall_back


