#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example output from agent on success:
# <<<timemachine>>>
# /Volumes/Backup/Backups.backupdb/macvm/2013-11-28-202610
#
# Example output from agent on failure:
# <<<timemachine>>>
# Unable to locate machine directory for host.

import datetime, time, re

backup_timemachine_default_levels = { "age": ( 86400, 172800 ) } # 1d/2d

def inventory_timemachine(info):
    return [(None, backup_timemachine_default_levels)]

def check_timemachine(item, params, info):
    message = " ".join(info[0])
    if not re.match('/Volumes/.+/[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]$', message):
        return 2, "Backup seems to have failed, message was: %s" % message

    warn, crit = params['age']
    now = datetime.datetime.now()
    tokens = message.split("/")
    timestamp = tokens[-1]
    state = 0
    result = re.match('([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])-([0-9][0-9])([0-9][0-9])([0-9][0-9])', timestamp)
    if result == None:
        return 3, "Timestamp of last backup in unknown format: %s" % timestamp
    y = int(result.group(1))
    m = int(result.group(2))
    d = int(result.group(3))
    H = int(result.group(4))
    M = int(result.group(5))
    S = int(result.group(6))
    backuptime = datetime.datetime( y, m, d, H, M, S)
    maxage_warn = datetime.timedelta(seconds=warn)
    maxage_crit = datetime.timedelta(seconds=crit)
    backupage = now - backuptime

    if backuptime > now:
        return 1, "Time problem: The last backup has a timestamp in the future: %s" % backuptime
    if backupage > maxage_warn:
        state = 1
    if backupage > maxage_crit:
        state = 2
    return state, "Last Backup was at %s (age %s)" % (backuptime, backupage)

check_info["timemachine"] = {
    "check_function"        : check_timemachine,
    "inventory_function"    : inventory_timemachine,
    "service_description"   : "Backup Timemachine",
    "group"                 : "backup_timemachine",
    "has_perfdata"          : False,
}
