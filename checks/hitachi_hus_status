#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_hitatchi_hus_status(info):
    return [ (None, None)]

def check_hitatchi_hus_status(_no_item, _no_params, info):
    status_values = {
        0           : ( "Array in normal status", 0 ),
        1           : ( "Drive blocked", 2 ),
        2           : ( "Spare drive blockade", 2 ),
        4           : ( "Data drive blockade", 2 ),
        8           : ( "ENC alarm", 1 ),
        64          : ( "Warned array", 1 ),
        128         : ( "Mate controller blocked",2 ),
        256         : ( "UPS alarm", 2 ),
        1024        : ( "Path blocked", 2 ),
        16384       : ( "Drive I/O module failure", 2 ),
        32768       : ( "Controller failure by related parts", 2 ),
        65536       : ( "Battery alarm", 1 ),
        131072      : ( "Power supply failure", 2 ),
        1048576     : ( "Fan alarm", 1 ),
        4194304     : ( "Host I/O module failure", 2 ),
        838608      : ( "Management module failure", 2 ),
        16777216    : ( "Host connector alarm", 2 ),
        268436456   : ( "Host connector alarm", 2 ),
    }

    for status, output in status_values.items():
        state, message = output
        if status & int(info[0][0]):
            return state, message

check_info["hitatchi_hus_status"] = {
    "check_function"        : check_hitatchi_hus_status,
    "inventory_function"    : inventory_hitatchi_hus_status,
    "service_description"   : "Status",
    "snmp_info"             : (".1.3.6.1.4.1.116.5.11.1.2.2", [ 1 ]),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.116"),
}

