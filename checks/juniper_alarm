#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

# .1.3.6.1.4.1.2636.3.1.10.1.8.3.1.1.0.0 1 --> JUNIPER-MIB::jnxLEDState.jnxContentsTable.1.1.0.0


def inventory_juniper_alarm(info):
    return [ (None, None) ]


def check_juniper_alarm(item, params, info):
    map_alarm = {
        "1" : (3, "unknown or unavailable"),
        "2" : (0, "OK, good, normally working"),
        "3" : (1, "alarm, warning, marginally working (minor)"),
        "4" : (2, "alert, failed, not working (major)"),
        "5" : (0, "OK, online as an active primary"),
        "6" : (1, "alarm, offline, not running (minor)"),
    }
    alarm_state = info[0][0]
    state, state_readable = map_alarm.get(alarm_state, (3, "unhandled alarm type '%s'" % alarm_state))
    return state, "Status: %s" % state_readable


check_info['juniper_alarm'] = {
    'inventory_function'        : inventory_juniper_alarm,
    'check_function'            : check_juniper_alarm,
    'service_description'       : 'Chassis',
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.2636.1.1.1.2"),
    'snmp_info'                 : (".1.3.6.1.4.1.2636.3.1.10.1", [
                                        "8",  # jnxLEDState
                                  ]),
}
