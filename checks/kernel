#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#   .--kernel--Counters----------------------------------------------------.
#   |                ____                  _                               |
#   |               / ___|___  _   _ _ __ | |_ ___ _ __ ___                |
#   |              | |   / _ \| | | | '_ \| __/ _ \ '__/ __|               |
#   |              | |__| (_) | |_| | | | | ||  __/ |  \__ \               |
#   |               \____\___/ \__,_|_| |_|\__\___|_|  |___/               |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |  Check page faults, context switches and process creations           |
#   '----------------------------------------------------------------------'

# Inventory creates three checks per default:
inventory_kernel_counters = [ "pgmajfault", "ctxt", "processes" ]
kernel_default_levels = None

kernel_counter_names = {
  "ctxt"       : "Context Switches",
  "processes"  : "Process Creations",
  "pgmajfault" : "Major Page Faults",
}

def inventory_kernel(info):
    inventory = []
    for counter in inventory_kernel_counters:
        hits = [ line[0] for line in info[1:] if line[0] == counter ]
        if len(hits) == 1:
            countername = kernel_counter_names.get(counter, counter)
            inventory.append( (countername, "kernel_default_levels") )
    return inventory


# item is one of the keys in /proc/stat or /proc/vmstat
def check_kernel(item, params, info):
    this_time = int(info[0][0])

    hits = [ (line[0], line[1])
             for line in info[1:]
             if line[0] == item or kernel_counter_names.get(line[0], line[0]) == item ]
    if len(hits) == 0:
        return (3, "item '%s' not found in agent output" % item)
    elif len(hits) > 1:
        return (3, "item '%s' not unique (found %d times)" % (item, len(hits)))

    counter = hits[0][0]
    this_val = int(hits[0][1])
    timedif, per_sec = get_counter("kernel." + counter, this_time, this_val)

    if type(params) == tuple:
        warn, crit = params
    else:
        warn, crit = None, None
    perfdata = [ (counter, per_sec, warn, crit) ]
    state, text, extraperf = check_levels(per_sec, counter, params)
    perfdata += extraperf
    infotext = "%.0f/s in last %d secs" % (per_sec, timedif)
    if text:
        infotext += ", " + text
    return state, infotext, perfdata

check_info["kernel"] = {
    'check_function':          check_kernel,
    'inventory_function':      inventory_kernel,
    'service_description':     'Kernel %s',
    'has_perfdata':            True,
    'group':                   'vm_counter',
}

#.
#   .--kernel.util--CPU Utilization----------------------------------------.
#   |             _   _ _   _ _ _          _   _                           |
#   |            | | | | |_(_) (_)______ _| |_(_) ___  _ __                |
#   |            | | | | __| | | |_  / _` | __| |/ _ \| '_ \               |
#   |            | |_| | |_| | | |/ / (_| | |_| | (_) | | | |              |
#   |             \___/ \__|_|_|_/___\__,_|\__|_|\___/|_| |_|              |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |  Check system/user/io-wait                                           |
#   '----------------------------------------------------------------------'

kernel_util_default_levels = None

def inventory_cpu_utilization(info):
    for x in info:
        if len(x) > 0 and x[0] == 'cpu':
            return [(None, {})]

# Columns of cpu usage /proc/stat:
# - cpuX: number of CPU or only 'cpu' for aggregation
# - user: normal processes executing in user mode
# - nice: niced processes executing in user mode
# - system: processes executing in kernel mode
# - idle: twiddling thumbs
# - iowait: waiting for I/O to complete
# - irq: servicing interrupts
# - softirq: servicing softirqs
# - steal: involuntary wait
def kernel_check_cpu_utilization(item, params, info):

    # Convert old style tuple-parameter to new dict
    if type(params) != dict:
        params = { "iowait": params }

    # Look for entry beginning with "cpu"
    f = [ l for l in info if l[0] == "cpu" ]
    if len(f) != 1:
        yield 3, "More than one line with CPU info found. This check is not cluster-enabled."
        return

    line = f[0]
    if len(line) < 8:
        line = line + ['0', '0', '0', '0'] # needed for Linux 2.4

    # line contains now the following columns:
    # 'cpu' user nice system idle wait hw-int sw-int (steal ...)
    # convert number to int
    values = [ int(x) for x in line[1:8] ]
    this_time = int(time.time())

    # Compute jiffi-differences of all relevant counters
    diff_values = []
    n = 0
    global g_counters
    for v in values:
        n += 1
        countername = "cpu.util.%d" % n
        last_time, last_val = g_counters.get(countername, (0, 0))
        diff_values.append(v - last_val)
        g_counters[countername] = (this_time, v)

    sum_jiffies = sum(diff_values[0:7]) # do not account for steal!
    if sum_jiffies == 0:
        raise MKCounterWrapped(None, "Too short time difference since last check")

    user        = diff_values[0] + diff_values[1] # add user + nice
    system      = diff_values[2]
    wait        = diff_values[4]
    user_perc   = 100.0 * float(user)   / float(sum_jiffies)
    system_perc = 100.0 * float(system) / float(sum_jiffies)
    wait_perc   = 100.0 * float(wait)   / float(sum_jiffies)
    perfdata = [
          ( "user",   "%.3f" % user_perc ),
          ( "system", "%.3f" % system_perc ),
          ( "wait",   "%.3f" % wait_perc ) ]

    yield 0, "user: %.1f%%, system: %.1f%%" % (user_perc, system_perc), perfdata

    # Handle level on iowait
    state = 0
    if "iowait" in params and params["iowait"] != None:
        warn, crit = params["iowait"]
        if wait_perc >= crit:
            state = 2
        elif wait_perc >= warn:
            state = 1
    yield state, "wait: %.1f%%" % (wait_perc)

    # Total utilization
    util_total_perc = user_perc + system_perc + wait_perc
    state = 0
    levelstext = ""
    if "util" in params:
        warn, crit = params["util"]
        if util_total_perc >= crit:
            state = 2
        elif util_total_perc >= warn:
            state = 1
        else:
            state = 0
        if state:
            levelstext = " (warn/crit at %.1f%%/%.1f%%)" % (warn, crit)

    yield state, "total: %.1f%%" % util_total_perc + levelstext


check_info["kernel.util"] = {
    'check_function':           kernel_check_cpu_utilization,
    'inventory_function':       inventory_cpu_utilization,
    'service_description':      'CPU utilization',
    'has_perfdata':             True,
    'default_levels_variable':  'kernel_util_default_levels',
    'group':                    'cpu_iowait',
}

