#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

brocade_mlx_info = [ ('.1.3.6.1.4.1.1991.1.1.1.2.1.1', [ 1, 2, 3 ]), # power supplies
                     ('.1.3.6.1.4.1.1991.1.1.1.3.1.1', [ 1, 2, 3 ]), # fans
                     ('.1.3.6.1.4.1.1991.1.1.2.2.1.1', [ 1, 2, 12 ]), # modules
                   ]

def brocade_mlx_scan(oid):
    return oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.1991.1.")

def combine_item(id, descr):
    if descr == "":
        return id
    else:
        return "%s: %s" % (id, descr)

#############################################################################
# Power Supplies
#############################################################################

def inventory_brocade_mlx_power(info):
    inventory = []
    for power_id, power_descr, power_state in info[0]:
        inventory.append( (combine_item(power_id, power_descr), None) )
    return inventory

def check_brocade_mlx_power(item, _no_params, info):
    for power_id, power_descr, power_state in info[0]:
        if combine_item(power_id, power_descr) == item:
            if power_state == "2":
                return 0, "Power supply reports status 2 (normal)"
            elif power_state == "3":
                return 2, "Power supply reports status 3 (failure)"
            else:
                return 3, "Power supply reports unidentified status %s" % power_state
    return 3, "Power supply %s not found" % item

check_info["brocade_mlx.power"] = {
    "check_function"        : check_brocade_mlx_power,
    "inventory_function"    : inventory_brocade_mlx_power,
    "service_description"   : "Power supply %s",
    "snmp_info"             : brocade_mlx_info,
    "snmp_scan_function"    : brocade_mlx_scan,
    "has_perfdata"          : False,
}

#############################################################################
# Fans
#############################################################################

def inventory_brocade_mlx_fan(info):
    inventory = []
    for fan_id, fan_descr, fan_state in info[1]:
        inventory.append( (combine_item(fan_id, fan_descr), None) )
    return inventory

def check_brocade_mlx_fan(item, _no_params, info):
    for fan_id, fan_descr, fan_state in info[1]:
        if combine_item(fan_id, fan_descr) == item:
            if fan_state == "2":
                return 0, "Fan reports status 2 (normal)"
            elif fan_state == "3":
                return 2, "Fan reports status 3 (failure)"
            else:
                return 3, "Fan reports unidentified status %s" % fan_state
    return 3, "Fan %s not found" % item

check_info["brocade_mlx.fan"] = {
    "check_function"        : check_brocade_mlx_fan,
    "inventory_function"    : inventory_brocade_mlx_fan,
    "service_description"   : "Fan %s",
    "snmp_info"             : brocade_mlx_info,
    "snmp_scan_function"    : brocade_mlx_scan,
    "has_perfdata"          : False,
}

#############################################################################
# Modules
#############################################################################

def inventory_brocade_mlx_module(info):
    inventory = []
    for module_id, module_descr, module_state in info[2]: 
        # do not inventorize modules reported as empty
        if module_state != "0":
            inventory.append( (combine_item(module_id, module_descr), None) )
    return inventory

def check_brocade_mlx_module(item, _no_params, info):
    for module_id, module_descr, module_state in info[2]:
        if combine_item(module_id, module_descr) == item:
            if module_state == "10":
                return 0, "Module reports status 10 (running)"
            elif module_state == "0":
                return 1, "Module reports status 0 (empty)"
            else:
                return 2, "Module reports status %s" % module_state
    return 3, "Module %s not found" % item

check_info["brocade_mlx.module"] = {
    "check_function"        : check_brocade_mlx_module,
    "inventory_function"    : inventory_brocade_mlx_module,
    "service_description"   : "Module %s",
    "snmp_info"             : brocade_mlx_info,
    "snmp_scan_function"    : brocade_mlx_scan,
    "has_perfdata"          : False,
}

