#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de


def parse_emc_vplex_if(info):
    directors = {}
    for director, ip in info[0]:
        directors[ip] = {"name": director}

    nics = []
    for idx, frontend_info in enumerate(info[1] + info[2]):
        index, description, readbytes, writebytes, if_ip = frontend_info
        if_ip = if_ip.rsplit(".", 1)[0]

        nic = [0] * 20
        nic[0]  = str(idx + 1)                          # Index
        nic[1]  = description                           # Description
        nic[2]  = ""
        #nic[3]  = 0                                    # Speed
        nic[4]  = "1"                                   # Status
        # IN
        nic[5]  = readbytes                             # inoctets
        #nic[6]  = 0                                    # inucast
        #nic[7]  = 0                                    # inmcast
        #nic[8]  = 0                                    # ibcast
        #nic[9]  = 0                                    # indiscards
        #nic[10] = 0                                    # inerrors
        # OUT
        nic[11] = writebytes                            # outoctets
        #nic[12] = 0                                    # outucast
        #nic[13] = 0                                    # outmcast
        #nic[14] = 0                                    # outbcast
        #nic[15] = 0                                    # outdiscards
        #nic[16] = 0                                    # outspeed
        #nic[17] = 0                                    # outqlen
        nic[18] = "%s %s" % (directors[if_ip]["name"], description) # Alias
        #nic[19] = 0                                    # MAC
        nics.append(nic)

    return nics


def inventory_emc_vplex_if(parsed):
    return inventory_if_common(parsed)

def check_emc_vplex_if(item, params, parsed):
    return check_if_common(item, params, parsed)

check_info["emc_vplex_if"] = {
    "parse_function"            : parse_emc_vplex_if,
    "check_function"            : check_emc_vplex_if,
    "inventory_function"        : inventory_emc_vplex_if,
    "service_description"       : "Interface %s",
    "snmp_scan_function"        : lambda oid: oid(".1.3.6.1.2.1.1.1.0") == None and\
                                              oid(".1.3.6.1.4.1.1139.21.2.2.8.1.*"),
    "snmp_info"                 : [
                                    (".1.3.6.1.4.1.1139.21.2.2", [
                                     "1.1.3", # vplexDirectorName
                                     OID_END
                                  ]),
                                  (".1.3.6.1.4.1.1139.21.2.2.5.1", [
                                     1, # vplexDirectorFEPortIndex
                                     2, # vplexDirectorFEPortName
                                     9, # vplexDirectorFEPortBytesRead
                                    10, # vplexDirectorFEPortBytesWrite
                                    OID_END
                                  ]),
                                  (".1.3.6.1.4.1.1139.21.2.2.7.1", [
                                     1, # vplexDirectorBEPortIndex
                                     2, # vplexDirectorBEPortName
                                     9, # vplexDirectorBEPortBytesRead
                                    10, # vplexDirectorBEPortBytesWrite
                                    OID_END
                                  ]),
                                  ],
    "has_perfdata"              : True,
    "default_levels_variable"   : "if_default_levels",
    "group"                     : "if",
    "includes"                  : [ "if.include" ],
}

