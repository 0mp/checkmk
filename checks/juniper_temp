#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

# .1.3.6.1.4.1.2636.3.1.13.1.5.7.1.0.0 FPC: EX3300 48-Port @ 0/*/* --> SNMPv2-SMI::enterprises.2636.3.1.13.1.5.7.1.0.0
# .1.3.6.1.4.1.2636.3.1.13.1.5.7.2.0.0 FPC: EX3300 48-Port @ 1/*/* --> SNMPv2-SMI::enterprises.2636.3.1.13.1.5.7.2.0.0
# .1.3.6.1.4.1.2636.3.1.13.1.7.7.1.0.0 45 --> SNMPv2-SMI::enterprises.2636.3.1.13.1.7.7.1.0.0
# .1.3.6.1.4.1.2636.3.1.13.1.7.7.2.0.0 43 --> SNMPv2-SMI::enterprises.2636.3.1.13.1.7.7.2.0.0

factory_settings["juniper_temp_default_levels"] = {
    "levels" : (55, 60), # Just an assumption based on observed real temperatures
}


def parse_juniper_temp(info):
    parsed = {}
    for description, reading_str in info:
        temperature = float(reading_str)
        if temperature > 0:
            description = description.replace(":", "") \
                                     .replace("/*", "") \
                                     .replace("@ ", "") \
                                     .strip()
            parsed[description] = temperature
    return parsed


def inventory_juniper_temp(parsed):
    return [ (description, {}) for description in parsed ]


def check_juniper_temp(item, params, parsed):
    if item in parsed:
        return check_temperature(parsed[item], params)


check_info['juniper_temp'] = {
    'parse_function'            : parse_juniper_temp,
    'inventory_function'        : inventory_juniper_temp,
    'check_function'            : check_juniper_temp,
    'service_description'       : 'Temperature %s',
    'has_perfdata'              : True,
    "snmp_scan_function"        : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.2636.1.1.1.2"),
    'snmp_info'                 : (".1.3.6.1.4.1.2636.3.1.13.1", [
                                        "5.7",    # jnxOperatingDescr
                                        "7.7",    # jnxOperatingTemp
                                  ]),
    'group'                     : 'temperature',
    'default_levels_variable'   : "juniper_temp_default_levels",
    'includes'                  : [ "temperature.include" ],
}
