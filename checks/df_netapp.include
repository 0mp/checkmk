#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

def inventory_df_netapp(info):
    mplist = []
    for volume, size_kb, used_kb in info:
        if saveint(size_kb) > 0: # Exclude filesystems with zero size (some snapshots)
            mplist.append(volume)
    return df_inventory(mplist)

def check_df_netapp(item, params, info):
    fslist = []
    for mp, size_kb, used_kb in info:
        if "patterns" in params or item == mp:
            size_mb = int(size_kb) / 1024
            used_mb = int(used_kb) / 1024
            avail_mb = size_mb - used_mb
            fslist.append((mp, size_mb, avail_mb, 0))
    return df_check_filesystem_list(item, params, fslist)

def is_netapp_filer(oid):
    return "ontap" in oid(".1.3.6.1.2.1.1.1.0").lower() or \
           oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.789")
