#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_df_netapp(info):
    inventory = []
    for volume, size_kb, used_kb in info:
        if saveint(size_kb) > 0: # Exclude filesystems with zero size (some snapshots)
            inventory.append((volume, {}))
    return inventory

def check_df_netapp(volume, params, info):
    # info columns: NAME SIZE USED
    infolines = [ l for l in info if l[0] == volume ]
    if len(infolines) == 0:
        return (2, "CRIT - volume %s is missing" % volume )
    elif len(infolines) > 1:
        return (3, "UNKNOWN - Volume listed more than once!")

    size_mb = int(infolines[0][1]) / 1024
    used_mb = int(infolines[0][2]) / 1024
    avail_mb = size_mb - used_mb

    return df_check_filesystem(g_hostname, volume, size_mb, avail_mb, params)

def is_netapp_filer(oid):
    return "ontap" in oid(".1.3.6.1.2.1.1.1.0").lower() or \
           oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.789")
