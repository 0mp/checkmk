#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | "_ \ / _ \/ __| |/ /   | |\/| | " /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# These values were determined by the author of the original check
# akcp_sensor_humidity
# This variable does not compy to the check guidelines. This has to be fixed one day.
akcp_humidity_defaultlevels = (35, 40, 60, 65)


factory_settings["akcp_temp_default_levels"] = {
    # These values were specified in the original check
    "levels" : (32, 35),
}


# States for sensors with relays as they are defined in SPAGENT-MIB
relay_states = {
    "1" : (2, "no status"     ),
    "2" : (0, "normal"        ),
    "4" : (2, "high critical" ),
    "6" : (2, "low critical"  ),
    "7" : (2, "sensor error"  ),
    "8" : (2, "relay on"      ),
    "9" : (0, "relay off"     ),
}


# States for sensors with levels as they are defined in SPAGENT-MIB
level_states = {
    "1" : (2, "no status"     ),
    "2" : (0, "normal"        ),
    "3" : (1, "high warning"  ),
    "4" : (2, "high critical" ),
    "5" : (1, "low warning"   ),
    "6" : (2, "low critical"  ),
    "7" : (2, "sensor error"  ),
}


def snmp_scan_akcp_sensor(oid):
    return oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.3854.1") \
            and not oid(".1.3.6.1.4.1.3854.2.*")


def snmp_scan_akcp_exp(oid):
    return oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.3854.1") \
            and oid(".1.3.6.1.4.1.3854.2.*")


def inventory_akcp_sensor(info, default_levels_name = None):
    for line in info:
        # Online is always at last index, "1" means online, "2" offline
        if line[-1] == "1":
            yield line[0], default_levels_name


def check_akcp_sensor_relay(item, _no_params, info):
    for description, status, online in info:
        if description == item:
            # Online is set to "2" if sensor is offline
            if online != "1":
                return 2, "sensor is offline"

            state, state_name = relay_states[status]
            return state, "State: %s" % state_name


def check_akcp_sensor_humidity(item, params, info):
    for description, percent, status, online in info:
        if description == item:
            # Online is set to "2" if sensor is offline
            if online != "1":
                return 2, "sensor is offline"

            if status in [ "1", "7" ]:
                state, state_name = level_states[status]
                return state, "State: %s" % state_name

            crit_lower, warn_lower, warn, crit = params
            humidity = int(percent)

            infotext = "%s%%" % humidity
            belowtext = " (warn/crit below %.1f/%.1f%%)" % (warn_lower, crit_lower)
            abovetext = " (warn/crit at %.1f/%.1f%%)"    % (warn, crit)

            perfdata = [ ( "humidity", humidity, crit_lower, warn_lower, warn, crit ) ]

            if humidity <= crit_lower:
                return 2, infotext + belowtext, perfdata
            elif humidity <= warn_lower:
                return 1, infotext + belowtext, perfdata
            elif humidity >= warn:
                return 1, infotext + abovetext, perfdata
            elif humidity >= crit:
                return 2, infotext + abovetext, perfdata
            else:
                return 0, infotext, perfdata


def check_akcp_sensor_temperature(item, params, info):
    for description, degree, unit, status, \
            low_crit, low_warn, high_warn, high_crit, \
            degreeraw, online \
        in info:

        if description == item:
            # Online is set to "2" if sensor is offline
            if online != "1":
                return 2, "sensor is offline"

            if status in [ "1", "7" ]:
                state, state_name = level_states[status]
                return state, "State: %s" % state_name

            # Unit "F" or "0" stands for Fahrenheit and "C" or "1" for Celsius
            if unit.isdigit():
                unit_normalised = unit == "0" and "f" or "c"
            else:
                unit_normalised = unit.lower()

            if degreeraw and degreeraw != "0":
                temperature = float(degreeraw) / 10.0
            else:
                temperature = float(degree)

            return check_temperature(temperature, params, unit_normalised, \
                    (float(high_warn), float(high_crit)), (float(low_warn), float(low_crit)))

