#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | "_ \ / _ \/ __| |/ /   | |\/| | " /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


akcp_sensor_humidity_defaultlevels = (35, 40, 60, 65)


factory_settings["akcp_sensor_temp_default_levels"] = {
    "levels" : (32, 35),
}

def snmp_scan_akcp_sensor(oid):
    return oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.3854.1") and not oid(".1.3.6.1.4.1.3854.2.*")


def snmp_scan_akcp_expansion_sensor(oid):
    return oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.3854.1") and oid(".1.3.6.1.4.1.3854.2.*")


def inventory_akcp_sensor(info, default_levels = None):
    for line in info:
        # Online is always at last index, "1" means online, "2" offline
        if line[-1] == "1":
            yield line[0], default_levels


def check_akcp_sensor_relay(item, info):
    # States as they are defined in corresponding MIB: SPAGENT-MIB (only "sensor is offline" is not defined in MIB)
    states = {
        "0" : (3, "sensor is offline"),
        "1" : (3, "no status"     ),
        "2" : (0, "normal"        ),
        "4" : (2, "high critical" ),
        "6" : (2, "low critical"  ),
        "7" : (2, "sensor error"  ),
        "8" : (2, "relay on"      ),
        "9" : (0, "relay off"     ),
    }

    for description, status, online in info:
        if description == item:
            # Online is set to "2" if sensor is offline
            if online != "1":
                status = "0"

            state, state_name = states[status]
            return state, "State: %s" % state_name


def check_akcp_sensor_humid(item, params, info):
    # States as they are defined in corresponding MIB: SPAGENT-MIB (only "sensor is offline" is not defined in MIB)
    states = {
        "0" : (3, "sensor is offline"),
        "1" : (3, "no status"     ),
        "2" : (0, "normal"        ),
        "3" : (1, "high warning"  ),
        "4" : (2, "high critical" ),
        "5" : (1, "low warning"   ),
        "6" : (2, "low critical"  ),
        "7" : (2, "sensor error"  ),
    }

    for description, percent, status, online in info:
        if description == item:
            # Online is set to "2" if sensor is offline
            if online != "1":
                status = "0"

            if status in [ "0", "1", "7" ]:
                state, state_name = states[status]
                return state, "State: %s" % state_name

            critlow, warnlow, warnhigh, crithigh = params
            humidity = int(percent)

            infotext = "%s%% (warn/crit below %.1f/%.1f or above %.1f/%.1f %%)" % \
                    ( humidity, warnlow, critlow, warnhigh, crithigh )
            perfdata = [ ( "humidity", humidity, critlow, warnlow, warnhigh, crithigh ) ]

            if humidity <= critlow or humidity >= crithigh:
                return 2, infotext, perfdata
            elif humidity <= warnlow or humidity >= warnhigh:
                return 1, infotext, perfdata
            else:
                return 0, infotext, perfdata


def check_akcp_sensor_temperature(item, params, info):
    # States as they are defined in corresponding MIB: SPAGENT-MIB (only "sensor is offline" is not defined in MIB)
    states = {
        "0" : (3, "sensor is offline"),
        "1" : (3, "no status"        ),
        "2" : (0, "normal"           ),
        "3" : (1, "high warning"     ),
        "4" : (2, "high critical"    ),
        "5" : (1, "low warning"      ),
        "6" : (2, "low critical"     ),
        "7" : (2, "sensor error"     ),
    }

    for description, degree, unit, status, low_crit, low_warn, high_warn, high_crit, degreeraw, online in info:
        if description == item:
            # Online is set to "2" if sensor is offline
            if online != "1":
                status = "0"

            if status in [ "0", "1", "7" ]:
                state, state_name = states[status]
                return state, "State: %s" % state_name

            # Unit "F" or "0" stands for Fahrenheit and "C" or "1" for Celsius
            if unit.isdigit():
                unit_normalised = unit == "0" and "f" or "c"
            else:
                unit_normalised = unit.lower()

            if degreeraw and degreeraw != "0":
                temperature = float(degreeraw) / 10.0
            else:
                temperature = float(degree)

            return check_temperature(temperature, params, unit_normalised, (float(high_warn), float(high_crit)), (float(low_warn), float(low_crit)))

