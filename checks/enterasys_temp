#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

enterasys_temp_default_levels = (30, 35)

def inventory_enterasys_temp(info):
    if info and info[0][0] != "0":
        return [ (None, "enterasys_temp_default_levels") ]

def check_enterasys_temp(item, params, info):
    # info for MIB: The ambient temperature of the room in which the chassis
    # is located. If this sensor is broken or not supported, then
    # this object will be set to zero. The value of this object
    # is the actual temperature in degrees Fahrenheit * 10.
    if info[0][0] == "0":
        return 3, "Sensor broken or not supported"

    temp = fahrenheit_to_celsius(int(info[0][0]) / 10.0)
    return check_temperature(temp, params)


check_info["enterasys_temp"] = {
    "check_function"        : check_enterasys_temp,
    "inventory_function"    : inventory_enterasys_temp,
    "service_description"   : "Temperature",
    "has_perfdata"          : True,
    "snmp_info"             : ( ".1.3.6.1.4.1.52.4.1.1.8.1", [ 1 ]), # chEnvAmbientTemp
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.5624.2.1") \
                                        or oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.5624.2.2"),
    "group"                 : "hw_single_temperature",
    "includes"              : [ "temperature.include" ],
}

