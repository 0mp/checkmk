#!/usr/bin/python


def check_wmic_process(item, params, info):
    name, memwarn, memcrit, pagewarn, pagecrit, cpuwarn, cpucrit = params
    count, mem, page, userc, kernelc = 0, 0, 0, 0, 0
    legend = info[0]
    for line in info[1:]:
        psinfo = dict(zip(legend, line))
        if psinfo["Name"].lower() == name.lower():
            count += 1
            mem  += int(psinfo["WorkingSetSize"])
            page += int(psinfo["PageFileUsage"])
            userc += int(psinfo["UserModeTime"])
            kernelc += int(psinfo["KernelModeTime"])
    if count == 0:
        return (3, "No process %s found" % name)

    mem_mb = mem / 1048576.0
    page_mb = page / 1048576.0 
    timedif, user_per_sec = get_counter("wmic_process.user.%s.%d" % (name, count), time.time(), userc)
    timedif, kernel_per_sec = get_counter("wmic_process.kernel.%s.%d" % (name, count), time.time(), kernelc)
    user_perc = user_per_sec / 100000.0
    kernel_perc = kernel_per_sec / 100000.0
    cpu_perc = user_perc + kernel_per_sec
    perfdata = [
            ("mem",    mem_mb,      memwarn,  memcrit),
            ("page",   page_mb,     pagewarn, pagecrit),
            ("user",   user_perc,   cpuwarn,  cpucrit,  0, 100),
            ("kernel", kernel_perc, cpuwarn,  cpucrit,  0, 100) ]

    infotext = " - %d processes, %.1fMB RAM, %1.fMB Page, %.0f%% User, %.0f%% Kernel" % \
                (count, mem_mb, page_mb, user_per_sec / 100000.0, kernel_per_sec / 100000.0)

    if cpu_perc >= cpucrit:
        state = 2
    elif page_mb >= pagecrit:
        state = 2
    elif mem_mb >= memcrit:
        state = 2
    elif cpu_perc >= cpuwarn:
        state = 1
    elif mem_mb >= memwarn:
        state = 1
    elif page_mb >= pagewarn:
        state = 1
    else:
        state = 0

    return (state, nagios_state_names[state] + infotext, perfdata)

check_info['wmic_process'] = (check_wmic_process, "proc_%s", 1, no_inventory_possible)
