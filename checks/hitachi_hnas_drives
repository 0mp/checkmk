#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de



def inventory_hitachi_hnas_drives(info):
    if info:
        return [(None, None)]

def parse_hitachi_hnas_drives(info):
    parsed = {}
    for index, status in info:
        parsed.setdefault(status, 0)
        parsed[status] += 1
    return parsed

def check_hitachi_hnas_drives(_no_item, params, info):
    status_map = (
            ("Online", 0),
            ("MBR corrupt", 2),
            ("Failed and unaccessible", 2),
            ("Not present", 2),
            ("Not accessible by controller", 2),
            ("Offline", 2),
            ("Initializing", 2),
            ("Formatting", 2),
            ("Unknown", 3),
    )
    for status, count in info.iteritems():
        infotext = "%s: %d" % (status_map[int(status)-1][0], count)
        yield status_map[int(status)-1][1], infotext


check_info["hitachi_hnas_drives"] = {
    "check_function"         : check_hitachi_hnas_drives,
    "inventory_function"     : inventory_hitachi_hnas_drives,
    "parse_function"         : parse_hitachi_hnas_drives,
    "service_description"    : "System Drives",
    "snmp_info"              : (".1.3.6.1.4.1.11096.6.1.1.1.3.4.2.1", [
                                        1, # sysDriveIndex
                                        4, # sysDriveStatus
                               ]),
    "snmp_scan_function"     : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.11096.6"),
}
