#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de


hitachi_hnas_bossock_default_levels = (250, 350)

def inventory_hitachi_hnas_bossock(info):
    for clusternode, fibers in info:
        yield clusternode, 'hitachi_hnas_bossock_default_levels'

def check_hitachi_hnas_bossock(item, params, info):
    for clusternode, fibers in info:
        if clusternode == item:
            warn, crit = params
            infotext = "%s running (levels %d/%d)" % (fibers, warn, crit)

            if int(fibers) >= crit:
                state = 2
            elif int(fibers) >= warn:
                state = 1
            else:
                state = 0

            perfdata = [ ("fibers", fibers, warn, crit) ]

            return state, infotext, perfdata

check_info["hitachi_hnas_bossock"] = {
    "check_function"        : check_hitachi_hnas_bossock,
    "inventory_function"    : inventory_hitachi_hnas_bossock,
    "service_description"   : "Bossock Fibers on Node %s",
    "has_perfdata"          : True,
    "group"                 : "bossock_fibers",
    "snmp_info"             : (".1.3.6.1.4.1.11096.6.1.1.6.7.4.1", [
                                    1, # clusterNodeStatsCnID
                                    2, # runningBossockFibers
                              ]),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.11096.6"),
}
