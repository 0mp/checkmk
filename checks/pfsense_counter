#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["pfsense_counter_default_levels"] = {
    "average"   : 15,
}


def parse_pfsense_counter(info):

    names = [ "match",
              "badoffset",
              "fragment",
              "short",
              "normalize",
              "memdrop",
            ]

    parsed = dict(zip(names,map(int, info[0])))
    return parsed


def inventory_pfsense_counter(parsed):
    if parsed:
        return [(None, {})]


def check_pfsense_counter(_no_item, params, parsed):

    namestoinfo = { "match"     : "Packets that matched a rule:",
                    "badoffset" : "Packets with bad offset:",
                    "fragment"  : "Fragmented packets:",
                    "short"     : "Short packets:",
                    "normalize" : "Normalized packets:",
                    "memdrop"   : "Packets dropped due to memory limitations:",
    }

    rate = {}
    avgrate = {}
    this_time = time.time()

    for what in parsed:

        rate[what] = get_rate("pfsense_counter-%s" % what, this_time,
                                parsed[what], onwrap=RAISE)
        infotext = "%s %.2f" % (namestoinfo[what], rate[what])
        perfdata = [ ("packets_" + what, rate[what]) ]

        if params.get("average"):
            backlog_minutes = params["average"]
            avgrate[what] = get_average("pfsense_counter-%srate" % what, this_time,
                                        rate[what], backlog_minutes * 60)
            check_against = avgrate[what]
        else:
            check_against = rate[what]

        status, extrainfo, extraperf = check_levels(check_against, what, params.get(what))
        if extrainfo:
            infotext += ", " + extrainfo
        perfdata += extraperf

        status = 0
        if what in params:
            warn, crit = params[what]
            levelstext = " (warn/crit at %d/%d pkts/s)" % (warn, crit)
            if check_against >= crit:
                status = 2
                infotext += levelstext
            elif check_against >= warn:
                status = 1
                infotext += levelstext
            else:
                status = 0
        yield status, infotext, perfdata


check_info["pfsense_counter"] = {
    "parse_function"            : parse_pfsense_counter,
    "inventory_function"        : inventory_pfsense_counter,
    "check_function"            : check_pfsense_counter,
    "default_levels_variable"   : "pfsense_counter_default_levels",
    "service_description"       : "Packets",
    "has_perfdata"              : True,
    "snmp_info"                 : (".1.3.6.1.4.1.12325.1.200.1.2", [
                                    "1", # pfCounterMatch
                                    "2", # pfCounterBadOffset
                                    "3", # pfCounterFragment
                                    "4", # pfCounterShort
                                    "5", # pfCounterNormalize
                                    "6", # pfCounterMemDrop
                                    ]),
    "snmp_scan_function"        : lambda oid: "pfsense" in oid(".1.3.6.1.2.1.1.1.0").lower(),
    "group"                     : "pfsense_counter",
}
