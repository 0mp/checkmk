#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# .1.3.6.1.4.1.2604.3.4 2 --> SOPHOS::sophosHwMemoryConsumption     Indicates whether the appliance is consuming excessive memory
# .1.3.6.1.4.1.2604.3.5 2 --> SOPHOS::sophosHwMemoryStatus          Indicates whether the appliance detects less memory than expected
# .1.3.6.1.4.1.2604.3.6 0 --> SOPHOS::sophosHwRaid                  Indicates whether the appliance RAID system is operating normally
# .1.3.6.1.4.1.2604.3.7 2 --> SOPHOS::sophosHwCpuStatus             Indicates whether the appliance CPU is operating normally
# .1.3.6.1.4.1.2604.3.8 0 --> SOPHOS::sophosHwPowerSupplyLeft       Indicates whether the left power supply is operating normally
# .1.3.6.1.4.1.2604.3.9 0 --> SOPHOS::sophosHwPowerSupplyRight      Indicates whether the right power supply is operating normally
# .1.3.6.1.4.1.2604.3.10 0 --> SOPHOS::sophosHwPowerSupplyFanLeft   Indicates whether the left power supply fan is operating normally
# .1.3.6.1.4.1.2604.3.11 0 --> SOPHOS::sophosHwPowerSupplyFanRight  Indicates whether the left power supply fan is operating normally
# .1.3.6.1.4.1.2604.3.12 2 --> SOPHOS::sophosHwSystemFan            Indicates whether all fans are operating normally
# .1.3.6.1.4.1.2604.3.13 2 --> SOPHOS::sophosHwTemperature          Indicates whether the appliance is operating within an acceptable temperature range
# .1.3.6.1.4.1.2604.3.14 2 --> SOPHOS::sophosHwVoltage              Indicates whether the appliance is operating within normal voltage ranges
# .1.3.6.1.4.1.2604.3.16 2 --> SOPHOS::sophosHwPowerSupplies        Indicates whether both power supplies are operating normally


def parse_sophos(info):
    sophos_map_state = {
        "0" : (3, "unknown"),
        "1" : (3, "disabled"),
        "2" : (0, "OK"),
        "3" : (1, "warn"),
        "4" : (2, "error"),
    }
    mem_consumpt, mem_state, raid_state, cpu_state,  \
    psu_left_state, psu_right_state, fan_left_state, \
    fan_right_state, system_fan_state, temp_state,   \
    volt_state, psu_state = map(lambda x: sophos_map_state[x], info[0])
    parsed = {
        "temp"       : [temp_state],
        "psus"       : [psu_state, volt_state],
        "psu_left"   : [psu_left_state],
        "psu_right"  : [psu_right_state],
        "fans"       : [system_fan_state],
        "fan_left"   : [fan_left_state],
        "fan_right"  : [fan_left_state],
        "mem"        : [mem_state, mem_consumpt],
        "cpu"        : [cpu_state],
        "raid"       : [raid_state],
    }
    return parsed


def inventory_sophos(parsed, sophos_type):
    # First state value is the operational state of the
    # hardware unit of the sophos email appliance
    if not parsed[sophos_type][0][1] in ["unknown", "disabled"]:
        return [ (None, None) ]


def check_sophos(_no_item, _no_params, parsed, sophos_type):
    sophos_states = parsed[sophos_type]
    state, state_readable = sophos_states[0]

    extra_info = ""
    if sophos_type == "psus":
        extra_info = " of all power supplies"
    elif sophos_type == "fans":
        extra_info = " of all fans"

    yield state, "Operational status%s: %s" % (extra_info, state_readable)

    if sophos_type == "mem":
        extra_state, extra_state_readable = sophos_states[1]
        yield extra_state, "Consumption status: %s" % extra_state_readable
    elif sophos_type == "psus":
        extra_state, extra_state_readable = sophos_states[1]
        yield extra_state, "Voltage usage: %s" % extra_state_readable



#   .--temperature---------------------------------------------------------.
#   |      _                                      _                        |
#   |     | |_ ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |     | __/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |     | ||  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      \__\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   +----------------------------------------------------------------------+
#   |                             main check                               |
#   '----------------------------------------------------------------------'

check_info['sophos'] = {
    'parse_function'            : parse_sophos,
    'inventory_function'        : lambda parsed: inventory_sophos(parsed, "temp"),
    'check_function'            : lambda item, params, info: check_sophos(item, params, info, "temp"),
    'service_description'       : 'Temperature Summary',
    'snmp_info'                 : (".1.3.6.1.4.1.2604.3",[
                                    "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "16",
                                  ]),
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.2604",
}

#.
#   .--psus system---------------------------------------------------------.
#   |                                            _                         |
#   |        _ __  ___ _   _ ___   ___ _   _ ___| |_ ___ _ __ ___          |
#   |       | '_ \/ __| | | / __| / __| | | / __| __/ _ \ '_ ` _ \         |
#   |       | |_) \__ \ |_| \__ \ \__ \ |_| \__ \ ||  __/ | | | | |        |
#   |       | .__/|___/\__,_|___/ |___/\__, |___/\__\___|_| |_| |_|        |
#   |       |_|                        |___/                               |
#   '----------------------------------------------------------------------'


check_info['sophos.psu'] = {
    'inventory_function'        : lambda parsed: inventory_sophos(parsed, "psus"),
    'check_function'            : lambda item, params, info: check_sophos(item, params, info, "psus"),
    'service_description'       : 'Power Supply Summary',
}

#.
#   .--psu left------------------------------------------------------------.
#   |                                    _       __ _                      |
#   |                  _ __  ___ _   _  | | ___ / _| |_                    |
#   |                 | '_ \/ __| | | | | |/ _ \ |_| __|                   |
#   |                 | |_) \__ \ |_| | | |  __/  _| |_                    |
#   |                 | .__/|___/\__,_| |_|\___|_|  \__|                   |
#   |                 |_|                                                  |
#   '----------------------------------------------------------------------'

check_info['sophos.psu_left'] = {
    'inventory_function'        : lambda parsed: inventory_sophos(parsed, "psu_left"),
    'check_function'            : lambda item, params, info: check_sophos(item, params, info, "psu_left"),
    'service_description'       : 'Power Supply Left',
}

#.
#   .--psu right-----------------------------------------------------------.
#   |                                     _       _     _                  |
#   |              _ __  ___ _   _   _ __(_) __ _| |__ | |_                |
#   |             | '_ \/ __| | | | | '__| |/ _` | '_ \| __|               |
#   |             | |_) \__ \ |_| | | |  | | (_| | | | | |_                |
#   |             | .__/|___/\__,_| |_|  |_|\__, |_| |_|\__|               |
#   |             |_|                       |___/                          |
#   '----------------------------------------------------------------------'

check_info['sophos.psu_right'] = {
    'inventory_function'        : lambda parsed: inventory_sophos(parsed, "psu_right"),
    'check_function'            : lambda item, params, info: check_sophos(item, params, info, "psu_right"),
    'service_description'       : 'Power Supply Right',
}

#.
#   .--fans system---------------------------------------------------------.
#   |         __                                 _                         |
#   |        / _| __ _ _ __  ___   ___ _   _ ___| |_ ___ _ __ ___          |
#   |       | |_ / _` | '_ \/ __| / __| | | / __| __/ _ \ '_ ` _ \         |
#   |       |  _| (_| | | | \__ \ \__ \ |_| \__ \ ||  __/ | | | | |        |
#   |       |_|  \__,_|_| |_|___/ |___/\__, |___/\__\___|_| |_| |_|        |
#   |                                  |___/                               |
#   '----------------------------------------------------------------------'


check_info['sophos.fans'] = {
    'inventory_function'        : lambda parsed: inventory_sophos(parsed, "fans"),
    'check_function'            : lambda item, params, info: check_sophos(item, params, info, "fans"),
    'service_description'       : 'Fans Summary',
}

#.
#   .--fan left------------------------------------------------------------.
#   |                   __               _       __ _                      |
#   |                  / _| __ _ _ __   | | ___ / _| |_                    |
#   |                 | |_ / _` | '_ \  | |/ _ \ |_| __|                   |
#   |                 |  _| (_| | | | | | |  __/  _| |_                    |
#   |                 |_|  \__,_|_| |_| |_|\___|_|  \__|                   |
#   |                                                                      |
#   '----------------------------------------------------------------------'

check_info['sophos.fan_left'] = {
    'inventory_function'        : lambda parsed: inventory_sophos(parsed, "fan_left"),
    'check_function'            : lambda item, params, info: check_sophos(item, params, info, "fan_left"),
    'service_description'       : 'Fan Left',
}

#.
#   .--fan right-----------------------------------------------------------.
#   |               __                    _       _     _                  |
#   |              / _| __ _ _ __    _ __(_) __ _| |__ | |_                |
#   |             | |_ / _` | '_ \  | '__| |/ _` | '_ \| __|               |
#   |             |  _| (_| | | | | | |  | | (_| | | | | |_                |
#   |             |_|  \__,_|_| |_| |_|  |_|\__, |_| |_|\__|               |
#   |                                       |___/                          |
#   '----------------------------------------------------------------------'

check_info['sophos.fan_right'] = {
    'inventory_function'        : lambda parsed: inventory_sophos(parsed, "fan_right"),
    'check_function'            : lambda item, params, info: check_sophos(item, params, info, "fan_right"),
    'service_description'       : 'Fan Right',
}

#.
#   .--memory--------------------------------------------------------------.
#   |                                                                      |
#   |              _ __ ___   ___ _ __ ___   ___  _ __ _   _               |
#   |             | '_ ` _ \ / _ \ '_ ` _ \ / _ \| '__| | | |              |
#   |             | | | | | |  __/ | | | | | (_) | |  | |_| |              |
#   |             |_| |_| |_|\___|_| |_| |_|\___/|_|   \__, |              |
#   |                                                  |___/               |
#   '----------------------------------------------------------------------'

check_info['sophos.mem'] = {
    'inventory_function'        : lambda parsed: inventory_sophos(parsed, "mem"),
    'check_function'            : lambda item, params, info: check_sophos(item, params, info, "mem"),
    'service_description'       : 'Memory Summary',
}

#.
#   .--cpu-----------------------------------------------------------------.
#   |                                                                      |
#   |                           ___ _ __  _   _                            |
#   |                          / __| '_ \| | | |                           |
#   |                         | (__| |_) | |_| |                           |
#   |                          \___| .__/ \__,_|                           |
#   |                              |_|                                     |
#   '----------------------------------------------------------------------'

check_info['sophos.cpu'] = {
    'inventory_function'        : lambda parsed: inventory_sophos(parsed, "cpu"),
    'check_function'            : lambda item, params, info: check_sophos(item, params, info, "cpu"),
    'service_description'       : 'CPU Summary',
}

#.
#   .--raid----------------------------------------------------------------.
#   |                                    _     _                           |
#   |                          _ __ __ _(_) __| |                          |
#   |                         | '__/ _` | |/ _` |                          |
#   |                         | | | (_| | | (_| |                          |
#   |                         |_|  \__,_|_|\__,_|                          |
#   |                                                                      |
#   '----------------------------------------------------------------------'

check_info['sophos.raid'] = {
    'inventory_function'        : lambda parsed: inventory_sophos(parsed, "raid"),
    'check_function'            : lambda item, params, info: check_sophos(item, params, info, "raid"),
    'service_description'       : 'Raid Summary',
}
