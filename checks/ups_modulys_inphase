#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

factory_settings['ups_modulys_inphase_default_levels'] = {
}

def parse_ups_modulys_inphase(info):
    parsed = {}
    parsed["Phase 1"] = {
        "frequency" : int(info[0][1]) / 10.0,
        "voltage"   : int(info[0][2]) / 10.0,
        "current"   : int(info[0][3]) / 10.0,
    }

    if info[0][0] == '3':
        parsed["Phase 2"] = {
            "frequency" : int(info[0][4]) / 10.0,
            "voltage"   : int(info[0][5]) / 10.0,
            "current"   : int(info[0][6]) / 10.0,
        }

        parsed["Phase 3"] = {
            "frequency" : int(info[0][7]) / 10.0,
            "voltage"   : int(info[0][8]) / 10.0,
            "current"   : int(info[0][9]) / 10.0,
        }

    return parsed


check_info['ups_modulys_inphase'] = {
    'parse_function'            : parse_ups_modulys_inphase,
    'inventory_function'        : inventory_elphase,
    'check_function'            : check_elphase,
    'service_description'       : 'Input %s',
    'has_perfdata'              : True,
    'default_levels_variable'   : 'ups_modulys_inphase_default_levels',
    'includes'                  : [ "elphase.include", ],
    'group'                     : 'el_inphase',
    'snmp_info'                 : (".1.3.6.1.4.1.2254.2.4.4", [
                                        "1", # dupsInputNumLines
                                        "2", # dupsInputFrequency1
                                        "3", # dupsInputVoltage1
                                        "4", # dupsInputCurrent1
                                        "5", # dupsInputFrequency2
                                        "6", # dupsInputVoltage2
                                        "7", # dupsInputCurrent2
                                        "8", # dupsInputFrequency3
                                        "9", # dupsInputVoltage3
                                        "10", # dupsInputCurrent3
                                  ]),
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.2254.2.4",
}
