#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de


def inventory_hitachi_hus_dku(info):
    for line in info:
        # dkuRaidListIndexSerialNumber
        yield line[0], None

def check_hitachi_hus_dku(item, _no_params, info):
    # table of end-OIDs, monitored components and OK states
    component_map = {
        2: ("Power Supply", (1,), (4, 5) ),
        3: ("Fan",          (1,), (4, 5) ),
        4: ("Environment",  (1,), (4, 5) ),
        5: ("Drive",        (1,), (4, 5) ),
    }
    error_list = [
        "unknown",
        "no error",
        "acute",
        "serious",
        "moderate",
        "service",
    ]
    for line in info:
        # dkuRaidListIndexSerialNumber
        if line[0] == item:
            infotext = ""
            errors = False
            for end_oid, (component, ok_states, warn_states) in component_map.iteritems():
                severity = int(line[end_oid - 1])
                if severity in warn_states:
                    errors = True
                    yield 1, "%s has errors of severity \"%s\"" % (component, error_list[severity])
                elif severity not in ok_states:
                    errors = True
                    yield 2, "%s has errors of severity \"%s\"" % (component, error_list[severity])
            if not errors:
                yield 0, "is working properly"


check_info["hitachi_hus_dku"] = {
    "check_function"        : check_hitachi_hus_dku,
    "inventory_function"    : inventory_hitachi_hus_dku,
    "service_description"   : "HUS DKU Chassis %s",
    "snmp_info"             : (".1.3.6.1.4.1.116.5.11.4.1.1.7.1", [
                                    1, # dkuRaidListIndexSerialNumber
                                    2, # dkuHWPS
                                    3, # dkuHWFan
                                    4, # dkuHWEnvironment
                                    5, # dkuHWDrive
                              ]),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.116.3.11"),
}
