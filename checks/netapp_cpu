#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

netapp_cpu_default_levels = (80.0, 90.0)

def check_netapp_cpu(item, params, info):
    util = float(info[0][0])
    infotext = "%2.1f%% utilization" % util
    warn, crit = params
    perfdata = [("util", util, warn, crit, 0, 100)]
    if util >= crit:
        return (2, infotext + " (critical at %d%%)" % crit, perfdata)
    elif util >= warn:
        return (1, infotext + " (warning at %d%%)" % warn, perfdata)
    else:
        return (0, infotext, perfdata)

check_info["netapp_cpu"] = {
    "check_function"        : check_netapp_cpu,
    "inventory_function"    : lambda info: [(None, "netapp_cpu_default_levels")],
    "service_description"   : "CPU utilization",
    "has_perfdata"          : True,
    "group"                 : "cpu_utilization",
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.1.0").startswith('NetApp Release') \
                                          and oid(".1.3.6.1.4.1.789.1.2.1.3.0"),
    "snmp_info"		    : ( ".1.3.6.1.4.1.789.1.2.1", [ 3 ]),
}

