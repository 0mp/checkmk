def inventory_h3c_lanswitch_sensors(checkname, info):
    return [ (h3c_lanswitch_genitem(line[0]), None) for line in info if line[1] in [ '1', '2']  ]



def check_h3c_lanswitch_sensors(item, params, info):
# the values are:   active     (1), deactive   (2), not-install  (3), unsupport    (4)
    for (endoid, status) in info:
        if h3c_lanswitch_genitem(endoid) == item:
	    if status == "2": 
	        return (2, "CRIT - Sensor %s status is %s" % (item, status))
	    elif status == "1":
		return (0, "OK - Sensor %s status is %s" % (item, status))
            else:
                return (1, "WARN - Sensor % status is %s" % (item, status))
    return (3, "UNKNOWN - Sensor %s not found" % item ) 


check_info["h3c_lanswitch_sensors"] = (check_h3c_lanswitch_sensors, "%s", 0, inventory_h3c_lanswitch_sensors )

def h3c_lanswitch_genitem(endoid):
     deviceclass, one, id = endoid.split(".")
#     print ("%s %s %s" % (deviceclass, one, id))
     if deviceclass == "1":
          hwLswdev = "Fan"
     else: 
          hwLswdev = "Powersupply"
     unitid = int(id) / 65536
     num = int(id) % 65536
     return "Unit %d %s %d" % (unitid, hwLswdev, num)
    

# mib: A3COM-HUAWEI-LswDEVM-MIB
# fan table: A3COM-HUAWEI-OID-MIB::lswCommon.9.1.1.1.1.65536 = INTEGER: 65536
# fan status: A3COM-HUAWEI-OID-MIB::lswCommon.9.1.1.1.2.65536 = INTEGER: 1
# hwdevMPowerStatusTable ( hwDevMPowerNum, hwDevMPowerStatus )
# hwdevMFanStatusTable
# 
#
# finally,just check fan status
snmp_info["h3c_lanswitch_sensors"] = \
   ( ".1.3.6.1.4.1.43.45.1.2.23.1.9.1", ["1.1", "2.1"], [ OID_END, "2" ] )


snmp_scan_functions["h3c_lanswitch_sensors"] = \
    lambda oid: "3com switch 5500" in oid (".1.3.6.1.2.1.1.1.0").lower() 
