#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de


apc_inrow_airflow_default_levels = { "level_low" : ( 5.0 , 2.0 ), "level_high" : ( 10.0, 11.0 ) }

def inventory_apc_inrow_airflow(info):
    if info:
        return [ (None, "apc_inrow_airflow_default_levels")]

def check_apc_inrow_airflow(_no_item, params, info):
    flow = saveint(info[0][0])/100.0
    state = 0
    message = ""

    warn, crit = params['level_low']
    if flow < crit:
        state = 2
        message = "to low"
    elif flow < warn:
        state = 1
        message = "to low"

    warn, crit =  params['level_high']
    if flow > crit:
        state = 2
        message = "to high"
    elif flow > warn:
        state = 1
        message = "to high"

    perf = [ ("flow", flow, warn, crit ) ]
    return state, "Current: %.2fl/s %s" % ( flow, message ), perf

check_info["apc_inrow_airflow"] = {
    "check_function"        : check_apc_inrow_airflow,
    "inventory_function"    : inventory_apc_inrow_airflow,
    "service_description"   : "Airflow",
    "snmp_info"             : (".1.3.6.1.4.1.318.1.1.13.3.2.2.2", [ "5" ]),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.318.1.3"),
    "group"                 : "airflow",
    "has_perfdata"          : True,
}
