#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

# Author: Lars Michelsen <lm@mathias-kettner.de>

hp_proliant_temp_status_map = { 1: 'other', 2: 'ok', 3: 'degraded', 4: 'failed' }
hp_proliant_status2nagios_map = { 'other': 3, 'ok': 0, 'degraded': 2, 'failed': 2 }
hp_proliant_temp_locale = {
    1:   "other",
    2:   "unknown",
    3:   "system",
    4:   "systemBoard",
    5:   "ioBoard",
    6:   "cpu",
    7:   "memory",
    8:   "storage",
    9:   "removableMedia",
    10:  "powerSupply",
    11:  "ambient",
    12:  "chassis",
    13:  "bridgeCard",
}

def inventory_hp_proliant_temp(info):
    if len(info) > 0:
        return [ ("%s (%s)" % (line[1], hp_proliant_temp_locale[int(line[2])]), None) for line in info ]

def check_hp_proliant_temp(item, _no_params, info):
    for line in info:
        if "%s (%s)" % (line[1], hp_proliant_temp_locale[int(line[2])]) == item:
            chassis, index, name, value, threshold, status = line
            snmp_status = hp_proliant_temp_status_map[int(status)]
            status      = hp_proliant_status2nagios_map[snmp_status]

            detail_output = ': %s Degrees Celsius' % value
            if int(value) > int(threshold):
                detail_output += ' (Above %s)' % threshold

            return (status, 'Temperature Sensor %s "%s"%s' %
                         (index, hp_proliant_temp_locale[int(name)],
                          detail_output),
                    [('temp', value, threshold, threshold)])
    return (3, "item not found in snmp data")

check_info["hp_proliant_temp"] = {
    'check_function':          check_hp_proliant_temp,
    'inventory_function':      inventory_hp_proliant_temp,
    'service_description':     'Temperature %s',
    'has_perfdata':            True,
    'snmp_info':               ( ".1.3.6.1.4.1.232.6.2.6.8.1", [
                                    "1", # cpqHeTemperatureChassis
                                    "2", # cpqHeTemperatureIndex
                                    "3", # cpqHeTemperatureLocale
                                    "4", # cpqHeTemperatureCelsius
                                    "5", # cpqHeTemperatureThresholdCelsius
                                    "6", # cpqHeTemperatureCondition
                               ] ),
    'snmp_scan_function':      \
     lambda oid: "proliant" in oid(".1.3.6.1.4.1.232.2.2.4.2.0", "").lower(),
    'group':                   'temperature_auto',
}
