#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

ibm_imm_fan_default_levels = (28, 25)

def inventory_ibm_imm_fan(info):
    for descr, speed in info:
        if speed.lower() != 'offline':
            yield descr, "ibm_imm_fan_default_levels"

def check_ibm_imm_fan(item, params, info):
    for descr, speed in info:
        if descr == item:

            if speed.lower() == "offline":
                return 2, "is offline"

            # speed can be "34 %", or "34%", or "34 % of maximum"
            # or simply a text without quotes..
            rpm_perc = int(speed.strip().replace("[\"%]", " ").replace("%", " ").split(" ")[0])
            infotext = "%d%% of max rpm" % rpm_perc

            state = 0
            levels_info = ""
            if type(params) == tuple:
                params = {'levels_lower' : params}

            warn_lower, crit_lower = params.get('levels_lower', (None, None))
            warn, crit = params.get('levels', (None, None))

            if warn_lower:
                if rpm_perc <= crit_lower:
                    state = 2
                elif rpm_perc <= warn_lower:
                    state = 1
                levels_info += " (warn/crit below %d%%/%d%%)" % (warn_lower, crit_lower)

            if warn:
                if rpm_perc >= crit:
                    state = 2
                elif rpm_perc >= warn:
                    state = 1
                levels_info += " (warn/crit at %d%%/%d%%)" % (warn, crit)

            if state > 0:
                infotext += levels_info

            return state, infotext

check_info["ibm_imm_fan"] = {
    'check_function'          : check_ibm_imm_fan,
    'inventory_function'      : inventory_ibm_imm_fan,
    'service_description'     : 'Fan %s',
    'snmp_scan_function'      :
            lambda oid: oid('.1.3.6.1.2.1.1.1.0').lower().endswith(" mips") or \
                        oid('.1.3.6.1.2.1.1.1.0').lower().endswith(" sh4a"),
    'snmp_info'               : ('.1.3.6.1.4.1.2.3.51.3.1.3.2.1', [ # fanTable.fanEntry
                                        2, # fanDescr
                                        3, # fanSpeed
                                ]),
    'group'                   : 'hw_fans_perc',
}
