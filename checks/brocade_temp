#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example output from agent:
#[['1', '24', 'SLOT #0: TEMP #1'],
#['2', '12', 'SLOT #0: TEMP #2'],
#['3', '12', 'SLOT #0: TEMP #3'],
#['4', '4687', 'FAN #1'],
#['5', '4560', 'FAN #2'],
#['6', '4821', 'FAN #3'],
#['7', '1', 'Power Supply #1'],
#['8', '1', 'Power Supply #2']]

brocade_temp_default_levels = ( 30, 40 )

def inventory_brocade_temp(info):
    info = brocade_sensor_convert(info, "SLOT")
    return [ (x[0], 'brocade_temp_default_levels') for x in info ]

def check_brocade_temp(item, params, info):
    info = brocade_sensor_convert(info, "SLOT")
    warn, crit = params
    for snmp_item, name, value in info:
        if item == snmp_item:
            state = 0
            label = ""
            value = saveint(value)
            perf = [ ('temp', value, warn, crit) ]
            if value >= crit:
                state = 2
                label = "(Levels at: %d/%d) %s" % (warn, crit, name)
            elif value >= warn:
                state = 1
                label = "(Levels at: %d/%d) %s" % (warn, crit, name)
              
            return state, "Temperature at %dÂ°C%s " % (value, label), perf
    return 3, "Temperature sensor not found"

check_info["brocade.temp"] = {
    "check_function"        : check_brocade_temp,
    "inventory_function"    : inventory_brocade_temp,
    "service_description"   : "Temperature %s",
    "has_perfdata"          : True,
    "group"                 : "hw_temperature",
    "includes"              : [ "brocade.include"], 
    "snmp_info"             : ('.1.3.6.1.4.1.1588.2.1.1.1.1.22.1', [ 4, 5 ] ),
    'snmp_scan_function':      \
     lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.1588.2.1.1") or \
                 oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.24.1.1588.2.1.1"),
}

