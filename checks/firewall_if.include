#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

def check_firewall_if(item, params, parsed):

    infotext_names = {
        "ip4_in_blocked"    : "Incoming IPv4 packets blocked: ",
    }

    this_time = time.time()

    for what in parsed[item]:

        counter = parsed[item][what]
        rate = get_rate("firewall_if-%s.%s" % (what, item), this_time,
                                 counter, onwrap=RAISE)

        if params.get("averaging"):
            backlog_minutes = params["averaging"]
            avgrate = get_average("firewall_if-%s.%s" % (what, item), this_time,
                                     rate, backlog_minutes * 60)
            check_against = avgrate
        else:
            check_against = rate

        infotext = infotext_names[what] + "%.2f pkts/s" % rate
        perfdata = [ (what, rate) ]

        status, extrainfo, extraperf = check_levels(check_against, what, params.get(what))
        if extrainfo:
            infotext += ", " + extrainfo
        perfdata += extraperf

        yield status, infotext, perfdata
