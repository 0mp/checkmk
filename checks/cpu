#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Output is taken from /proc/loadavg plus the number of cores:
# 0.26 0.47 0.52 2/459 19531 4


cpuload_default_levels = (5, 10)
threads_default_levels = (2000, 4000)

def inventory_cpu_load(info):
    if len(info) == 1 and len(info[0]) >= 5:
        return [(None, "cpuload_default_levels")]

def check_cpu_load(item, params, info):
    load = []
    for i in [ 0, 1, 2 ]:
        load.append(float(info[0][i]))
    if len(info[0]) >= 6:
        num_cpus = int(info[0][5])
    else:
        num_cpus = 1

    infotext = " - 15min load %.2f at %s CPUs" % (load[2], num_cpus)

    # Pair of numbers -> static levels
    if type(params) == tuple:
        warn_upper, crit_upper = params[0] * num_cpus, params[1] * num_cpus
        warn_lower, crit_lower = None, None
        ref_value = None

    # Dictionary -> predictive levels
    else:
        ref_value, ((warn_upper, crit_upper), (warn_lower, crit_lower)) = \
            get_predictive_levels('load15', params, "MAX")
        infotext += ", predicted reference: %.2f" % ref_value

    perfdata = [ ('load' + str(z), l, warn_upper, crit_upper, 0, num_cpus ) for (z,l) in [ (1,load[0]), (5,load[1]), (15, load[2]) ] ]
    if ref_value:
        perfdata.append(('predict_load15', ref_value))

    # Critical cases
    if crit_upper != None and load[2] >= crit_upper:
        state = 2
        infotext += " (level at %.2f)" % crit_upper
    elif crit_lower != None and load[2] <= crit_lower:
        state = 2
        infotext += " (too low: level at %.2f)" % crit_lower

    # Warning cases
    elif warn_upper != None and load[2] >= warn_upper:
        state = 1
        infotext += " (level at %.2f)" % warn_upper
    elif warn_lower != None and load[2] <= warn_lower:
        state = 1
        infotext += " (too low: level at %.2f)" % warn_lower

    # OK
    else:
        state = 0

    return state, nagios_state_names[state] + infotext, perfdata

def inventory_cpu_threads(info):
    if len(info) == 1 and len(info[0]) >= 5:
        return [(None, "", "threads_default_levels")]

def check_cpu_threads(item, params, info):
    try:
        nthreads = int(info[0][3].split('/')[1])
    except:
        return (3, "UNKNOWN - invalid output from plugin")
    warn, crit = params
    perfdata = [('threads', nthreads, warn, crit, 0 )]
    if nthreads >= crit:
        return (2, "CRIT - %d threads (critical at %d)" % (nthreads, crit), perfdata)
    elif nthreads >= warn:
        return (1, "WARN - %d threads (warning at %d)" % (nthreads, warn), perfdata)
    else:
        return (0, "OK - %d threads" % (nthreads,), perfdata)

check_info["cpu.loads"] = {
    "check_function"          : check_cpu_load,
    "inventory_function"      : inventory_cpu_load,
    "service_description"     : "CPU load",
    "has_perfdata"            : True,
    "group"                   : "cpu_load",
}

check_info["cpu.threads"] = {
    "check_function"        : check_cpu_threads,
    "inventory_function"    : inventory_cpu_threads,
    "service_description"   : "Number of threads",
    "has_perfdata"          : True,
    "group"                 : "threads",
}

