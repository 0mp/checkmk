#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_raritan_pdu_ocprot(info):
    parsed = {}
    for line in info:
        if line[0].endswith("15"):
            ocprotid = "C" + line[0].split(".")[1]
            if parsed.get(ocprotid) == None:
                parsed[ocprotid] = {}
            parsed[ocprotid]["state"] = line[1]
        elif line[0].endswith("1"):
            ocprotid = "C" + line[0].split(".")[1]
            if parsed.get(ocprotid) == None:
                parsed[ocprotid] = {}
            parsed[ocprotid]["current"] = float(line[2]) / 10
    return parsed


#.
#   .--Current-------------------------------------------------------------.
#   |                  ____                          _                     |
#   |                 / ___|   _ _ __ _ __ ___ _ __ | |_                   |
#   |                | |  | | | | '__| '__/ _ \ '_ \| __|                  |
#   |                | |__| |_| | |  | | |  __/ | | | |_                   |
#   |                 \____\__,_|_|  |_|  \___|_| |_|\__|                  |
#   |                                                                      |
#   '----------------------------------------------------------------------'

raritan_pdu_ocprot_current_default_levels = (14.0, 15.0)


def inventory_raritan_pdu_ocprot_current(parsed):
    for ocprotid in parsed:
        yield ocprotid, "raritan_pdu_ocprot_current_default_levels"


def check_raritan_pdu_ocprot_current(item, params, parsed):
    current = parsed[item]["current"]
    warn, crit = params

    infotext = "%.1f A" % current
    levelstext = " (warn/crit at %.1f/%.1f A)" % (warn, crit)

    if current >= crit:
        status = 2
        infotext += levelstext
    elif current >= warn:
        status = 1
        infotext += levelstext
    else:
        status = 0

    perfdata = [ ("current", current, warn, crit) ]

    return status, infotext, perfdata


check_info["raritan_pdu_ocprot.current"] = {
    "inventory_function"        : inventory_raritan_pdu_ocprot_current,
    "check_function"            : check_raritan_pdu_ocprot_current,
    "service_description"       : "Overcurrent Protector Current %s",
    "has_perfdata"              : True,
    "group"                     : "ocprot_current",
}


#.
#   .--Status--------------------------------------------------------------.
#   |                    ____  _        _                                  |
#   |                   / ___|| |_ __ _| |_ _   _ ___                      |
#   |                   \___ \| __/ _` | __| | | / __|                     |
#   |                    ___) | || (_| | |_| |_| \__ \                     |
#   |                   |____/ \__\__,_|\__|\__,_|___/                     |
#   |                                                                      |
#   '----------------------------------------------------------------------'

def inventory_raritan_pdu_ocprot(parsed):
    for ocprotid in parsed:
        yield ocprotid, None


def check_raritan_pdu_ocprot(item, _no_params, parsed):
    states = {
        "-1"    : (3, "Overcurrent protector information is unavailable"),
        "0"     : (2, "Overcurrent protector is open"),
        "1"     : (0, "Overcurrent protector is closed"),
    }
    return states[parsed[item]["state"]]


check_info["raritan_pdu_ocprot"] = {
    "parse_function"            : parse_raritan_pdu_ocprot,
    "inventory_function"        : inventory_raritan_pdu_ocprot,
    "check_function"            : check_raritan_pdu_ocprot,
    "service_description"       : "Overcurrent Protector Status %s",
    "snmp_info"                 : (".1.3.6.1.4.1.13742.6.5.3.3.1", [
                                    OID_END,
                                    "3",
                                    "4",
                                  ]),
    "snmp_scan_function"        : lambda oid: "13742" in oid(".1.3.6.1.2.1.1.2.0"),
}
