#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<netapp_api_vs_traffic:sep(9)>>>
# lif:vserver	instance_uuid 4294967295	instance_name sb1	sent_errors 0	recv_errors 0	recv_packet 2829484819	sent_data 195843143147494	recv_data 235279250436	sent_packet 2931673721
# lif:vserver	instance_uuid 16	instance_name vsFS	sent_errors 0	recv_errors 0	recv_packet 484167790	sent_data 797233808196	recv_data 1394815374648	sent_packet 528348598
# lif:vserver	instance_uuid 12	instance_name vsJdvNFS	sent_errors 0	recv_errors 0	recv_packet 6540071557	sent_data 32743076744140	recv_data 4788773463640	sent_packet 2345186799
# lif:vserver	instance_uuid 4294967293	instance_name Cluster	sent_errors 0	recv_errors 0	recv_packet 70347523802	sent_data 428491336084067	recv_data 428491299022706	sent_packet 60139669669
# lif:vserver	instance_uuid 14	instance_name vsiSCSI	sent_errors 0	recv_errors 0	recv_packet 0	sent_data 0	recv_data 0	sent_packet 0
# lif:vserver	instance_uuid 5	instance_name vsPrio1NFS	sent_errors 0	recv_errors 0	recv_packet 104795187642	sent_data 563302484162880	recv_data 127704556800232	sent_packet 14555238352
# lif:vserver	instance_uuid 15	instance_name vsTestserverNFS	sent_errors 0	recv_errors 0	recv_packet 91578131168	sent_data 354434691196564	recv_data 243266754095060	sent_packet 22547314022
# cifs:vserver	session_timed_out 17731	sd_max_ace_size 72,36,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	node_referral_not_possible 0	flow_control_back_to_back 0	continuously_available_connections 0	file_handle_cache_miss_latency 0	cred_max_user_claims 0	avg_directory_depth 2548721810	file_handle_cache_hits 0	node_referral_issued 0	signed_sessions 0	nameserver_query_request_matches 0	cifs_write_ops 109703194	branchcache_missing_hash_bytes 0	flow_control_connections 0	nameserver_registration_request_matches 0	cifs_write_size_histo 0,7236882,5724302,2873426,4517640,27500532,24335720,17226978,4576834,113063858,0	max_active_searches 35	open_files 2322	persistent_opens 0	established_sessions 51	duplicate_session_disconnected 366	change_notifications_outstanding 2210	cred_max_device_groups 0	file_handle_cache_misses 0	path_cache_hits 0	durable_opens 74289238	connections 49	nameserver_connections 0	file_handle_cache_latency 0	nbt_session_requests 34	active_searches 1	branchcache_hash_sent_bytes 0	node_referral_local 0	max_directory_depth 50	cifs_latency_hist 836818743,0,0,0,0,0,0,1,22,52068668,149777455,8479337,4171788,3876390,3327601,2537128,1940366,990454,803403,479503,1319335,225605,145180,104621,255039,245673,174082,167571,131082,439728,117216,86035,8176,6280,17033,6747,8408,3504,592,3089	max_open_files_per_share 2596	commands_outstanding 4	non_unicode_client_rejected 0	reconnection_requests_total 1244	cifs_read_size_histo 0,75122769,42744733,5759252,5266028,20032456,32249410,2599898,4680620,37587180,0	cifs_latency 9403817108427	file_handle_cache_miss_latency_histogram 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	file_handle_cache_hit_latency_histogram 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	instance_uuid 16	path_cache_max_entries 0	flow_control_latency_hist 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	path_cache_entries 0	cifs_read_latency 8961041033277	max_established_sessions 162	nameserver_registration_requests 0	branchcache_hash_fetch_ok 0	max_connected_shares 146	path_cache_miss_latency 0	reconnection_requests_failed 1114	max_connections 159	cifs_read_ops 118962129	cred_max_user_groups 193	flow_control_max_queue_depth 0	cifs_latency_base 1068735855	path_cache_latency 0	cred_max_device_claims 0	max_searches_per_session 35	file_handle_cache_hit_latency 0	cifs_op_pct 177369686,90754000,118962161,109703194,927824,561900326,1005716,7435945	max_open_files 2898	path_cache_misses 0	file_handle_cache_entries 0	auth_reject_too_many 0	sd_max_ace_count 53,11,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	nameserver_query_requests 0	instance_name vsFS	nbt_session_keepalives 0	path_cache_hit_latency 0	file_handle_cache_max_entries 0	branchcache_hash_fetch_fail 0	server_side_close_conn 18096	file_handle_cache_requests 0	max_change_notifications_outstanding 2624	optimized_smb2_opens 99145714	cifs_read_latency_hist 78632402,0,0,0,0,0,0,1,1,6097371,17826012,2174999,2266171,2697798,2376241,1741330,1025921,669130,519645,344486,698049,141579,110082,81143,213961,207261,166124,162970,128281,435606,108674,85695,8033,6187,16807,6693,7154,2641,592,3089	path_based_ops 290277398	max_sessions_per_connection 14	cifs_op_count 177369686,90754000,118962161,109703194,927824,561900326,1005716,7435945	path_cache_requests 0	node_referral_remote 0	max_nameserver_connections 0	max_junction_depth 0	max_commands_outstanding 296	copyoffload_directcopy_read_request 0	connected_shares 50	cifs_ops 1068739369	lock_reconstruction 0	path_cache_miss_latency_histogram 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	cifs_write_latency_hist 75583112,0,0,0,0,0,0,0,4,8261663,23854323,1054014,238646,159751,140982,153960,175948,25937,7607,5161,20009,7836,5855,4137,3814,287,22,39,63,19,4,0,1,0,0,0,0,0,0,0	avg_junction_depth 38630	path_cache_hit_latency_histogram 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0	max_shares_per_session 6	cifs_write_latency 45287411513
# iscsi_lif:vserver	iscsi_read_ops 4071295661	avg_write_latency 3429809602514	outside_cmd_sn_win_pdus 0	read_size_hist 846,1497841,15256,7901,916654,2036802496,303376210,201144477,689304534,124358283,713871163,0,0,0,0,0	login_resp_sent 358	data_out_blocks 49907327196	data_in_blocks 561331011304	avg_latency 49457438162841	logout_normals 9	unknown_pdu_rcvd 0	text_cmd_failed 0	text_cmd_rcvd 0	async_msg_sent 0	read_latency_hist 0,70,1699,764623,28961981,1342460644,554960573,254697935,159476271,94672672,247605570,114351333,77062938,94756087,99431892,83703383,66714073,57941219,53054919,47124594,262015764,220196756,104401649,50918260,50669371,3960274,893555,416941,33691,40546,6350,27,0,1,0,0,0,0,0,0	login_authorization_errors 0	scsi_cmd_rcvd 6103031854	header_digest_errors 0	logout_failed 0	iscsi_write_ops 2030687943	logout_resp__sent 9	error_status_cdb 4202	taskmgmt_cmd_rcvd 12	logout_others 0	scsi_resp_sent 2031686921	nop_in_sent 0	avg_other_latency 357509043	logout_cmd_rcvd 9	login_negotiation_errors 0	taskmgmt_resp_sent 12	login_cmd_rcvd 358	write_size_hist 293,5763019,13135704,2806387,1300276541,132438195,33668534,231323117,172936767,19080614,119258772,0,0,0,0,0	data_in_sent 6518103611	success_status_cdb 6103027652	r2t_sent 397452874	write_data 287401010421671	login_other_errors 0	reject_sent 0	login_authentication_errors 0	avg_read_latency 46027271051284	instance_uuid 51bef734-3a68-11e4-89c7-123478563412	login_failed 0	login_redirect 0	data_digest_errors 0	read_data 25552551524352	taskmgmt_failed 0	iscsi_other_ops 1048259	instance_name vsiSCSI	snack_rcvd 0	data_out_rcvd 397452874	cmd_transfered 6103031854	text_resp_sent 0	nop_out_rcvd 0	protocol_errors 0	write_latency_hist 0,5,172,99,3,930446840,696912930,54924262,26127199,15765199,71875349,49288089,35293391,37096308,30419329,20841344,12477301,7966232,5976633,4618984,22725237,3661885,1448950,822252,1422437,444394,68394,32003,18928,12483,1275,0,0,18,18,0,0,0,0,0	login_accept 358

def inventory_netapp_api_vs_traffic(parsed, what):
    for key, values in parsed.items():
        if key.startswith(what) and len(values) > 3: # only report instances which actually have infos
            yield values["instance_name"], None

# Ethernet
def check_netapp_api_vs_traffic(item, _no_params, parsed):
    real_item = "lif:vserver.%s" % item
    data = parsed.get(real_item)
    if not data:
        return

    now = time.time()
    for what, name, is_bytes in [
                        ("recv_data",   "Received data", True),
                        ("sent_data",   "Sent data", True),
                        ("recv_errors", "Received errors", False),
                        ("sent_errors", "Sent errors", False),
                        ("recv_packet", "Received packets", False),
                        ("sent_packet", "Sent packets", False)]:
        rate = get_rate(what, now, int(data[what]))
        if is_bytes:
            yield 0, "%s: %s/s" % (name, get_bytes_human_readable(rate, base = 1000.0)), [(what, rate)]
        else:
            yield 0, "%s: %s" % (name, get_bytes_human_readable(rate, base = 1000.0, unit="")), [(what, rate)]


# Fibrechannel
def check_netapp_api_vs_traffic_fcp(item, _no_params, parsed):
    real_item = "fcp_lif:vserver.%s" % item
    data = parsed.get(real_item)
    if not data:
        return

    now = time.time()
    for what, name, scale, unit in [
                        ("avg_read_latency",  "Avg. Read Latency",  0.000001, "ms"),
                        ("avg_write_latency", "Avg. Write Latency", 0.000001, "ms"),
                        ("read_data",   "Read Data", 1, "B"),
                        ("write_data", "Write Data", 1, "B")]:
        rate = get_rate(what, now, int(data[what]) * scale)
        yield 0, "%s: %s" % (name, get_bytes_human_readable(rate, base = 1000.0, unit = unit)), [(what, rate)]

# CIFS
def check_netapp_api_vs_traffic_cifs(item, _no_params, parsed):
    real_item = "cifs:vserver.%s" % item
    data = parsed.get(real_item)
    if not data:
        return

    now = time.time()
    for what, name, scale, unit in [
                        ("cifs_read_latency",   "Read Latency",  0.001, "ms"),
                        ("cifs_write_latency",  "Write Latency", 0.001, "ms"),
                        ("cifs_write_ops", "Write OPS", 1, ""),
                        ("cifs_read_ops",   "Read OPS", 1, "")]:
        rate = get_rate(what, now, int(data[what]) * scale)
        yield 0, "%s: %.1f %s" % (name, rate, unit), [(what, rate)]

## ISCSI
def check_netapp_api_vs_traffic_iscsi(item, _no_params, parsed):
    real_item = "iscsi_lif:vserver.%s" % item
    data = parsed.get(real_item)
    if not data:
        return
    now = time.time()
    for what, name, scale, unit in [
                        ("avg_read_latency",  "Avg. Read Latency",  0.000001, "ms"),
                        ("avg_write_latency", "Avg. Write Latency", 0.000001, "ms"),
                        ("read_data",   "Read Data", 1, "B"),
                        ("write_data", "Write Data", 1, "B")]:
        rate = get_rate(what, now, int(data[what]) * scale)
        yield 0, "%s: %s" % (name, get_bytes_human_readable(rate, base = 1000.0, unit = unit)), [(what, rate)]

## NFS
def check_netapp_api_vs_traffic_nfs(item, _no_params, parsed, item_prefix):
    real_item = "%s.%s" % (item_prefix, item)
    data = parsed.get(real_item)
    if not data:
        return

    now = time.time()
    for what, name, scale, unit in [
                        ("read_ops",   "Read OPS", 1, ""),
                        ("write_ops", "Write OPS", 1, "")]:
        protocol_what = "%s_%s" % (item_prefix, what)
        rate = get_rate(what, now, int(data[protocol_what]) * scale)
        yield 0, "%s: %s" % (name, get_bytes_human_readable(rate, base = 1000.0, unit = unit)), [(what, rate)]


check_info["netapp_api_vs_traffic"] = {
    'parse_function'      : lambda info: netapp_api_parse_lines(info, custom_keys = ["protocol", "instance_name"]),
    'inventory_function'  : lambda parsed: inventory_netapp_api_vs_traffic(parsed, "lif:vserver"),
    'check_function'      : check_netapp_api_vs_traffic,
    'service_description' : 'Traffic Eth vServer %s',
    'has_perfdata'        : True,
    'includes'            : [ "netapp_api.include" ]
}

check_info["netapp_api_vs_traffic.fcp"] = {
    'inventory_function'  : lambda parsed: inventory_netapp_api_vs_traffic(parsed, "fcp_lif:vserver"),
    'check_function'      : check_netapp_api_vs_traffic_fcp,
    'service_description' : 'Traffic FCP vServer %s',
    'has_perfdata'        : True,
    'includes'            : [ "netapp_api.include" ]
}

check_info["netapp_api_vs_traffic.cifs"] = {
    'inventory_function'  : lambda parsed: inventory_netapp_api_vs_traffic(parsed, "cifs:vserver"),
    'check_function'      : check_netapp_api_vs_traffic_cifs,
    'service_description' : 'Traffic CIFS vServer %s',
    'has_perfdata'        : True,
    'includes'            : [ "netapp_api.include" ]
}

check_info["netapp_api_vs_traffic.iscsi"] = {
    'inventory_function'  : lambda parsed: inventory_netapp_api_vs_traffic(parsed, "iscsi_lif:vserver"),
    'check_function'      : check_netapp_api_vs_traffic_iscsi,
    'service_description' : 'Traffic ISCSI vServer %s',
    'has_perfdata'        : True,
    'includes'            : [ "netapp_api.include" ]
}

check_info["netapp_api_vs_traffic.nfsv3"] = {
    'inventory_function'  : lambda parsed: inventory_netapp_api_vs_traffic(parsed, "nfsv3"),
    'check_function'      : lambda item, _no_params, parsed: check_netapp_api_vs_traffic_nfs(item, _no_params, parsed, "nfsv3"),
    'service_description' : 'Traffic NFS vServer %s',
    'has_perfdata'        : True,
    'includes'            : [ "netapp_api.include" ]
}

check_info["netapp_api_vs_traffic.nfsv4"] = {
    'inventory_function'  : lambda parsed: inventory_netapp_api_vs_traffic(parsed, "nfsv4"),
    'check_function'      : lambda item, _no_params, parsed: check_netapp_api_vs_traffic_nfs(item, _no_params, parsed, "nfsv4"),
    'check_function'      : check_netapp_api_vs_traffic_nfs,
    'service_description' : 'Traffic NFSv4 vServer %s',
    'has_perfdata'        : True,
    'includes'            : [ "netapp_api.include" ]
}

check_info["netapp_api_vs_traffic.nfsv4_1"] = {
    'inventory_function'  : lambda parsed: inventory_netapp_api_vs_traffic(parsed, "nfsv4_1"),
    'check_function'      : lambda item, _no_params, parsed: check_netapp_api_vs_traffic_nfs(item, _no_params, parsed, "nfsv4_1"),
    'service_description' : 'Traffic NFSv4_1 vServer %s',
    'has_perfdata'        : True,
    'includes'            : [ "netapp_api.include" ]
}
