#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

hp_prolaint_power_default_levels = ( 300, 400 )

def inventory_hp_proliant_power(info):
    if len(info) > 0 and info[0][0] != '0':
        return [ ( None, 'hp_prolaint_power_default_levels') ]

def check_hp_proliant_power(item, params, info):
    status_table = {
        1 : "other",
        3 : "absent",
    }
    status, reading = map(int, info[0])
    if status != 2:
        return 2, "Power Meter state: %s" % ( status_table[status] )
    warn, crit = params
    state = 0
    levels = ''
    if reading >= crit:
        state = 2
        levels = '( Warning/Critical %s/%s )' % ( warn, crit )
    elif reading >= warn:
        state = 1
        levels = '( Warning/Critical %s/%s )' % ( warn, crit )

    perf = [ ('watt', reading, warn, crit ) ]
    return state, "Current reading: %d Watt" % reading + levels, perf

check_info["hp_proliant_power"] = {
    'group'                 : 'epower_single',
    'check_function'        : check_hp_proliant_power,
    'inventory_function'    : inventory_hp_proliant_power,
    'service_description'   : 'HW Power Meter',
    'snmp_info':               (
        ".1.3.6.1.4.1.232.6.2.15", [
            "2", # cpqHePowerMeterStatus
            "3", # cpqHePowerMeterCurrReading
        ]
    ),
    'snmp_scan_function'    :      \
         lambda oid: "proliant" in oid(".1.3.6.1.4.1.232.2.2.4.2.0", "").lower(),
    'has_perfdata'          : True
}
