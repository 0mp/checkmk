#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

# Example Output:
# .1.3.6.1.4.1.5951.4.1.1.41.2.0  13
# .1.3.6.1.4.1.5951.4.1.1.41.4.0  7902

netscaler_mem_default_levels = (80.0, 90.0)

def inventory_netscaler_mem(info):
    if info:
        return [ (None, 'netscaler_mem_default_levels') ]

def check_netscaler_mem(_no_item, params, info):
    used_mem_perc, total_mem_mb = map(float, info[0])
    warn_perc, crit_perc = params
    total_mem = total_mem_mb * 1024 * 1024
    warn, crit, used_mem  = map(lambda s: s * total_mem / 100.0, params + (used_mem_perc,) )
    infotext = "%s (%d%%) of %s" % ( get_bytes_human_readable(used_mem), used_mem_perc,
                                     get_bytes_human_readable(total_mem) )
    perfdata = [ ("mem", used_mem, warn, crit, 0, total_mem ) ]

    state = 0
    if used_mem >= crit:
        state = 2
    elif used_mem >= warn:
        state = 1
    if state > 0:
        infotext += " (warn/crit at %.1f%%/%.1f%%)" % (warn_perc, crit_perc)

    return state, infotext, perfdata

check_info["netscaler_mem"] = {
    "check_function"          : check_netscaler_mem,
    "inventory_function"      : inventory_netscaler_mem,
    "service_description"     : "Memory used",
    "has_perfdata"            : True,
    "group"                   : "netscaler_mem",
    "snmp_info"               : (".1.3.6.1.4.1.5951.4.1.1.41", [ # nsResourceGroup
                                            2, # resMemUsage
                                            4, # memSizeMB
                                        ]),
    "snmp_scan_function"      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.5951.1"),
}
