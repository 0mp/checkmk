#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def fahrenheit_to_celsius(tempf):
    return (float(tempf) - 32) * (5.0 / 9.0)

def celsius_to_fahrenheit(tempc):
    return (float(tempc) * (9.0 / 5.0)) + 32


# Checks Celsius temperature against crit/warn levels defined in params. temp must
# be int or float

def check_temperature(temp, params, dev_unit = "c", dev_levels = None, dev_levelsl = None, dev_status = None):

    def tostring(temp):
        if type(temp) == int:
            return "%d" % temp
        else:
            return "%.1f" % temp

    def outtemp(tempc, output_unit):
        if output_unit == "f":
            return celsius_to_fahrenheit(tempc)
        elif output_unit == "k":
            return tempc + 273.15
        else:
            return tempc

    def check_levels(temp, warn, crit, warnl, critl):
        if crit != None and temp >= crit:
            status = 2
        elif critl != None and temp < critl:
            status = 2
        elif warn != None and temp >= warn:
            status = 1
        elif warnl != None and temp < warnl:
            status = 1
        else:
            status = 0
        return status

    unitsym = {
        "c": "°C",
        "f": "°F",
        "k": "K",
    }

    if params == None or params == (None, None):
        params = {}
    elif type(params) == tuple:
        params = { "levels" : params }

    input_unit = params.get("input_unit", dev_unit)
    output_unit = params.get("output_unit", "c")

    if input_unit == "f":
        temp = fahrenheit_to_celsius(temp)
    if input_unit == "k":
        temp = temp - 273.15

    usr_levels = params.get("levels", None)
    usr_levelsl = params.get("levels_lower", None)
    dlh = params.get("device_levels_handling", "usrdefault")

    uwarn = ucrit = uwarnl = ucritl = dwarn = dcrit = dwarnl = dcritl = None

    if usr_levels:
        uwarn, ucrit = usr_levels
    if usr_levelsl:
        uwarnl, ucritl = usr_levelsl
    if dev_levels:
        dwarn, dcrit = dev_levels
    if dev_levelsl:
        dwarnl, dcritl = dev_levelsl

#    if dev_status:
#        warn, crit, warnl, critl = uwarn, ucrit, uwarnl, ucritl
#        ustatus = check_levels(temp, warn, crit, warnl, critl)
#        if dlh == "usr":
#            status = ustatus
#        if dlh == "dev" or dlh == "devdefault":
#            warn = crit = warnl = critl = None
#            status = dev_status
#        if dlh == "best":
#            status = min(dev_status, ustatus)
#        if dlh == "worst":
#            status = max(dev_status, ustatus)

#    if not dev_status:
    if dlh == "usr":
        warn, crit, warnl, critl = uwarn, ucrit, uwarnl, ucritl

    if dlh == "dev":
        warn, crit, warnl, critl = dwarn, dcrit, dwarnl, dcritl

    if dlh == "best":
        warn, crit = max(uwarn, dwarn), max(ucrit, dcrit)
        warnl, critl = min(uwarnl, dwarnl), min(ucritl, dcritl)

    if dlh == "worst":
        warn, crit = min(uwarn, dwarn), min(ucrit, dcrit)
        warnl, critl = max(uwarnl, dwarnl), max(ucritl, dcritl)

    if dlh == "usrdefault":
        if usr_levels:
            warn, crit = usr_levels
        else:
            warn, crit = dwarn, dcrit
        if usr_levelsl:
            warnl, critl = usr_levelsl
        else:
            warnl, critl = dwarnl, dcritl

    if dlh == "devdefault":
        if dev_levels:
            warn, crit = dev_levels
        else:
            warn, crit = uwarn, ucrit
        if dev_levelsl:
            warnl, critl = dev_levelsl
        else:
            warn, crit = uwarnl, ucritl

    status = check_levels(temp, warn, crit, warnl, critl)

    perfdata = [ ("temp", temp, warn, crit, warnl, critl) ]

    infotext = "%s %s" % (tostring(outtemp(temp, output_unit)), unitsym[output_unit])
    ulevelstext = ""
    ulevelstext_lower = ""
    dlevelstext = ""
    dlevelstext_lower = ""
    if usr_levels:
        ulevelstext = " (warn/crit at %s/%s %s)" % (
            tostring(outtemp(uwarn, output_unit)),
            tostring(outtemp(ucrit, output_unit)),
            unitsym[output_unit])
    if usr_levelsl:
        ulevelstext_lower = " (warn/crit below %s/%s %s)" % (
            tostring(outtemp(uwarnl, output_unit)),
            tostring(outtemp(ucritl, output_unit)),
            unitsym[output_unit])
    if dev_levels:
        dlevelstext = " (device warn/crit at %s/%s %s)" % (
            tostring(outtemp(dwarn, output_unit)),
            tostring(outtemp(dcrit, output_unit)),
            unitsym[output_unit])
    if dev_levelsl:
        dlevelstext_lower = " (device warn/crit below %s/%s %s)" % (
            tostring(outtemp(dwarnl, output_unit)),
            tostring(outtemp(dcritl, output_unit)),
            unitsym[output_unit])


    if status in [1, 2] :
        if dlh == "usr":
            infotext += ulevelstext + ulevelstext_lower
        elif dlh == "dev":
            infotext += dlevelstext + dlevelstext_lower
        elif dlh == "best" or dlh == "worst":
            infotext += ulevelstext + ulevelstext_lower + dlevelstext + dlevelstext_lower
        elif dlh == "devdefault":
            infotext += dlevelstext + dlevelstext_lower
            if not dev_levels:
                infotext += ulevelstext
            if not dev_levelsl:
                infotext += ulevelstext_lower
        elif dlh == "usrdefault":
            infotext += ulevelstext + ulevelstext_lower
            if not usr_levels:
                infotext += dlevelstext
            if not usr_levelsl:
                infotext += dlevelstext_lower

    return status, infotext, perfdata
