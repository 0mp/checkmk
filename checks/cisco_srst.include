#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.



# .1.3.6.1.4.1.9.9.441.1.2.1.0 2 --> CISCO-SRST-MIB::csrstEnabled.0, 1:enabled, 2:disable

# .1.3.6.1.4.1.9.9.441.1.3.1.0 2 --> CISCO-SRST-MIB::csrstState.0, 1:active, 2:inactive
# .1.3.6.1.4.1.9.9.441.1.3.2.0 0 --> CISCO-SRST-MIB::csrstSipPhoneCurrentRegistered.0
# .1.3.6.1.4.1.9.9.441.1.3.3.0 0 --> CISCO-SRST-MIB::csrstSipCallLegs.0
# .1.3.6.1.4.1.9.9.441.1.3.4.0 0 --> CISCO-SRST-MIB::csrstTotalUpTime.0


# factory_settings["cisco_srst_default_levels"] = {
#     "registered_phones" : (20,40),
#     "active_call_legs"  : (10,15),
# }
#
#
# def inventory_cisco_srst(info):
#     pprint.pprint(info)
#     inventory = ["Current state", "Registered phones", "Active call legs", "Time since router is active"]
#     return [(i, None) for i in inventory ]
#
#
# def check_cisco_srst(item, params, info):
#     if item == "Current state":
#         val = int(info[0][0])
#         if val == 2:
#             return (1, "Inactive SRST mode")
#         elif val == 1:
#             return (0, "Active SRST mode")
#     elif item == "Registered phones":
#         warn, crit = params["registered_phones"]
#         val = int(info[1][0])
#         perfdata = [("phones", val)]
#         if val >= crit:
#             return (2, "TOO MUCH PHONES: %s" % val, perfdata)
#         elif val >= warn:
#             return (1, "A lot of phones registered: %s" % val, perfdata)
#         else:
#             return (0, "Total number: %s" % val, perfdata)
#     elif item == "Active call legs":
#         warn, crit = params["active_call_legs"]
#         val = int(info[2][0])
#         perfdata = [("call_legs", val)]
#         if val >= crit:
#             return (2, "TOO MUCH PARTICIPANTS: %s" % val, perfdata)
#         elif val >= warn:
#             return (1, "A lot of participants: %s" % val, perfdata)
#         else:
#             return (0, "Total number: %s" % val, perfdata)
#     elif item == "Time since router is active":
#         val = int(info[3][0])
#         perfdata = [("active_time", val)]
#         return (0, "Active since %s" % val + " minutes.", perfdata)
#     else:
#         return (3, 'foo')


def cisco_srst_scan_function(oid):
    return "cisco" in oid(".1.3.6.1.2.1.1.1.0").lower() and \
                      oid(".1.3.6.1.4.1.9.9.441.1.2.1.0") == "1"

