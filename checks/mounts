#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

def inventory_mounts(info):
    inventory = []
    devices = []
    for dev, mp, fstype, options, dump, fsck in info:
        if fstype not in [ 'tmpfs' ] and dev not in devices:
            devices.append(dev)
            opts = options.split(",")
            opts.sort()
            inventory.append( (mp, opts) )
    return inventory

def check_mounts(item, targetopts, info):
    for dev, mp, fstype, options, dump, fsck in info:
        if item == mp:
            opts = options.split(",")
            # Now compute the exact difference.

            exceeding = []
            for o in opts:
                if o not in targetopts and not o.startswith("commit=") \
                                       and not o.startswith("localalloc="):
                    exceeding.append(o)

            missing = []
            for o in targetopts:
                if o not in opts and not o.startswith("commit=") \
                                 and not o.startswith("localalloc="):
                    missing.append(o)

            if not missing and not exceeding:
                return (0, "mount options exactly as expected")

            infos = []
            if missing:
                infos.append("missing: %s" % ",".join(missing))
            if exceeding:
                infos.append("exceeding: %s" % ",".join(exceeding))
            infotext = ", ".join(infos)

            if "ro" in exceeding:
                return (2, "filesystem has switched to read-only "
                           "and is probably corrupted(!!), " + infotext)

            # Just warn in other cases
            return (1, infotext)

    return (3, "filesystem not mounted")



check_info["mounts"] = {
    'check_function':          check_mounts,
    'inventory_function':      inventory_mounts,
    'service_description':     'Mount options of %s',
    'group':                   'fs_mount_options',
}
