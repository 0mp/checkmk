#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

check_includes["hitachi_hnas_span"] = [ "df.include" ]

def inventory_hitachi_hnas_span(info):
    mplist = []
    for id, label, total_upper, total_lower, used_upper, used_lower in info:
        mplist.append(id + " " + label)
    return df_inventory(mplist)

def check_hitachi_hnas_span(item, params, info):
    fslist = []
    for id, label, total_upper, total_lower, used_upper, used_lower in info:
        if id + " " + label == item:
            size_mb = (int(total_upper) * 2 ** 32 + int(total_lower)) / 1048576.0
            used_mb = (int(used_upper) * 2 ** 32 + int(used_lower)) / 1048576.0
            avail_mb  = size_mb - used_mb
            fslist.append((item, size_mb, avail_mb, 0))

            return df_check_filesystem_list(item, params, fslist)

    return 3, "Span %s not found" % item

check_info["hitachi_hnas_span"] = {
    "check_function"         : check_hitachi_hnas_span,
    "inventory_function"     : inventory_hitachi_hnas_span,
    "service_description"    : "Span %s",
    "has_perfdata"           : True,
    "snmp_info"              : (".1.3.6.1.4.1.11096.6.1.1.6.4.2.1", [1, 2, 3, 4, 5, 6]),
                               # spanStatsSpanId, spanLabel, spanCapacityTotalUpper, spanCapacityTotalLower,
                               # spanCapacityUsedUpper, spanCapacityUsedLower
    "snmp_scan_function"     : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.11096.6"),
    "group"                  : "filesystem",
    "default_levels_variable": "filesystem_default_levels",
}
