#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de



def parse_snmp_uptime(ticks):
    try:
        if len(ticks) < 3:
            return 0
        else:
            return int(ticks[:-2])
    except:
        days, h, m, s = ticks.split(":")
        return (int(days) * 86400 ) + (int(h) * 3600) + (int(m) * 60) + int(float(s))

# Example for params:
# {
#    "min" : ( 7200, 3600 ),            # Minimum required uptime (warn, crit)
#    "max" : ( 86400 * 7, 86400 * 14),  # Maximum required uptime (warn, crit)
# }

def check_uptime_seconds(params, uptime_sec):
    seconds  = uptime_sec % 60
    rem      = uptime_sec / 60
    minutes  = rem % 60
    hours    = (rem % 1440) / 60
    days     = rem / 1440
    since    = time.strftime("%c", time.localtime(time.time() - uptime_sec))

    state    = 0
    infotext = "up since %s (%dd %02d:%02d:%02d)" % \
                (since, days, hours, minutes, seconds)

    if params == None: # legacy: support older versions of parameters
        params = {}

    if "min" in params:
        warn, crit = params["min"]
        if uptime_sec < crit:
            state = 2
        elif uptime_sec < warn:
            state = max(state, 1)

        if state:
            infotext += ", not up long enough!"

    if "max" in params:
        warn, crit = params["max"]
        if uptime_sec > crit:
            state = 2
        elif uptime_sec > warn:
            state = max(state, 1)

        if uptime_sec > warn:
            infotext += ", up too long!"

    return (state,  infotext, [ ("uptime", uptime_sec) ])

