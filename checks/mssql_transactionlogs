#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# <<<mssql_transactionlogs>>>
# database table max_size_in_bytes allocated_size_in_bytes used_size_in_bytes


factory_settings['mssql_transactionlogs_default_levels'] = {
    'used_levels'           : (80, 90),
}


def format_item_mssql_transactionlogs(database, table):
    return "%s.%s" % (database, table)


def inventory_mssql_transactionlogs(info):
    for database, table, physical_name, max_size, allocated_size, used_size in info:
        yield format_item_mssql_transactionlogs(database, table), {}


def check_mssql_transactionlogs(item, params, info):
    def calculate_levels(levels, reference_value):
        if isinstance(levels[0], float):
            return map(lambda x: (x * reference_value) / 100, levels)
        elif levels[0] is not None:
            return map(lambda x: x * 1024 * 1024, levels)
        else:
            return None, None

    for database, table, physical_name,  max_size, allocated_size, used_size in info:
        if format_item_mssql_transactionlogs(database, table) == item:
            # these values are returned from the db in number of 8KB blocks and divided by
            # 128 by the plugin to get MB.
            max_size, allocated_size, used_size = map(lambda x: float(x) * 1024 * 1024,
                                                      (max_size, allocated_size, used_size))

            for param_key,                name,             perf_key,         value,          reference_value in [
                ('used_levels',           "used",           "data_size",      used_size,      max_size),
                ('allocated_used_levels', "allocated used", None,             used_size,      allocated_size),
                ('allocated_levels',      "allocated",      "allocated_size", allocated_size, max_size),
            ]:
                status = 0

                levels = params.get(param_key, (None, None))
                if isinstance(levels, list):
                    warn, crit = None, None
                    for level_set in levels:
                        if max_size > level_set[0]:
                            print(level_set)
                            warn, crit = calculate_levels(level_set[1], reference_value)
                            break
                else:
                    warn, crit = calculate_levels(levels, reference_value)

                if crit is not None and value >= crit:
                    status = 2
                elif warn is not None and value >= warn:
                    status = 1

                if status > 0:
                    wc_msg = " (warn/crit at %s/%s)" % (
                                get_bytes_human_readable(warn),
                                get_bytes_human_readable(crit))
                else:
                    wc_msg = ""

                if perf_key is not None or status != 0:
                    yield status, "%s of %s %s%s" %\
                        (get_bytes_human_readable(value),
                         get_bytes_human_readable(reference_value),
                         name, wc_msg), \
                        [(perf_key, value, warn, crit, 0, reference_value)]

check_info['mssql_transactionlogs'] = {
    'check_function'          : check_mssql_transactionlogs,
    'inventory_function'      : inventory_mssql_transactionlogs,
    'service_description'     : 'Transactionlog %s',
    'group'                   : "mssql_transactionlogs",
    'has_perfdata'            : True,
    'default_levels_variable' : 'mssql_transactionlogs_default_levels'
}
