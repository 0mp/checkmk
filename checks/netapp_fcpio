#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

netapp_fcpio_default_levels = { "read" : (None, None), "write" : (None, None)}

def check_netapp_fcpio(item, params, info):
    read, write = map(int, info[0])
    this_time = int(time.time())
    avg_read  = get_rate("netapp_fcpio.read", this_time, read)
    avg_write  = get_rate("netapp_fcpio.write", this_time, write)

    read_warn, read_crit = params['read']
    write_warn, write_crit = params['write']

    perfdata = [("write", avg_write, write_warn, write_crit ),
    		("read", avg_read, read_warn, read_crit ),
    	       ]
    state = 0
    read_msg = ''
    write_msg = ''
    if read_warn != None and read_warn >= read:
        state = 1
	read_msg = ' (!)'
    if read_crit != None and read_crit >= read:
        state = 2
	read_msg = ' (!!)'

    if write_warn != None and write_warn >= write:
        state = max(state, 1)
        write_msg = ' (!)'
    if write_crit != None and write_crit >= write:
        state = 2
	write_msg = ' (!!)'


    infotext = "%s read%s, %s write%s" % (get_bytes_human_readable(avg_read), \
    read_msg, get_bytes_human_readable(avg_write), write_msg)

    return(state, infotext, perfdata)


check_info["netapp_fcpio"] = {
    "check_function"        : check_netapp_fcpio,
    "inventory_function"    : lambda info: [(None, "netapp_fcpio_default_levels")],
    "service_description"   : "FCP I/O",
    "has_perfdata"          : True,
    "group"                 : "netapp_fcportio",
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.1.0").startswith('NetApp Release') \
                                          and oid(".1.3.6.1.4.1.789.1.17.20.0"),
    "snmp_info"		    : ( ".1.3.6.1.4.1.789.1.17", [ 20, 21 ]),
}

