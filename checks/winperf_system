#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_win_diskstat(checkname, info):
    for line in info[1:]:
        try:
            if line[0] == '16' or line[0] == '18':
                return [(None, None)]
        except:
            pass


def check_win_diskstat(item, params, info):
    this_time = int(float(info[0][0]))
    read_bytes_ctr = 0
    write_bytes_ctr = 0
    for line in info[1:]:
        if line[0] == '16':
            read_bytes_ctr = int(line[1])
        elif line[0] == '18':
            write_bytes_ctr = int(line[1])
            break
    try:
        read_timedif,  read_per_sec  = \
            get_counter("winperf_system.diskio.read",  this_time, read_bytes_ctr)
        write_timedif, write_per_sec = \
            get_counter("winperf_system.diskio.write", this_time, write_bytes_ctr)

    except MKCounterWrapped, e:
        # make sure that inital check does not need three cycles for all counters
        # to be initialized
        get_counter("winperf_system.diskio.write", this_time, write_bytes_ctr)
        raise e

    perfdata = [ ("read", "%dc" % read_bytes_ctr),
                 ("write", "%dc" % write_bytes_ctr) ]
    return (0, "OK - reading %.1f MB/s, writing %.1f MB/s (in last %d secs)" %
            (read_per_sec / 1048576, write_per_sec / 1048576, read_timedif), perfdata)

check_info['winperf_system.diskio'] = (check_win_diskstat, "Disk IO SUMMARY", 1,  inventory_win_diskstat)
