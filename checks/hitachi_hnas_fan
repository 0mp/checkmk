#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

def inventory_hitachi_hnas_fan(info):
    inventory = []
    for clusternode, fan_id, fitted_status, speed_status, speed in info:
        inventory.append( (clusternode + "." + fan_id, None) )
    return inventory


def check_hitachi_hnas_fan(item, _no_params, info):

    fitted_status_map = (
        ("ok",            0), # 1
        ("okIdWrong(!)",  1), # 2
        ("notFitted(!!)", 2), # 3
        ("unknown(!)",    1)  # 4
    )

    speed_status_map = (
        ("ok",            0), # 1
        ("warning(!)",    1), # 2
        ("severe(!!)",    2), # 3
        ("unknown(!)",    1), # 4
    )

    for clusternode, fan_id, fitted_status, speed_status, speed in info:
        if clusternode + "." + fan_id == item:
            fitted_status = int(fitted_status)
            speed_status  = int(speed_status)
            speed         = int(speed)
            infotext      = "PNode %s fan %s" % (clusternode, fan_id)

            worststate = 0

            # check fitted status
            name, state = fitted_status_map[fitted_status - 1]
            infotext += ", fitted status is %s" % name
            worststate = max(worststate, state)

            # check speed status
            name, state = speed_status_map[speed_status - 1]
            infotext += ", speed status is %s" % name
            worststate = max(worststate, state)

            # report speed
            infotext += ", speed is %s rpm" % speed
            perfdata = [ ('fanspeed', str(speed) + 'rpm', '',   '',   0, '') ]

            return worststate, infotext, perfdata

    return 3, "No fan %s found" % item



check_info["hitachi_hnas_fan"] = {
    "check_function"        : check_hitachi_hnas_fan,
    "inventory_function"    : inventory_hitachi_hnas_fan,
    "service_description"   : "Fan %s",
    "has_perfdata"          : True,
    "snmp_info"             : (".1.3.6.1.4.1.11096.6.1.1.1.2.1.11.1", [
       1, # fanClusterNode
       2, # fanIndex
       3, # fanFittedStatus
       4, # fanSpeedStatus
       5, # fanSpeed
    ]),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.11096.6"),
}
