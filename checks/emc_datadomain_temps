#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

def inventory_emc_datadomain_temps(info):
    for encid, descr, reading, status in info:
        item = descr + " Enclosure " + encid
        yield item, {}

def check_emc_datadomain_temps(item, params, info):
    state_table = {
        "0": (2, "Failed"),
        "1": (0, "OK"),
        "2": (2, "Not found"),
        "3": (1, "Overheat Warning"),
        "4": (2, "Overheat Critical"),
    }
    for encid, descr, reading, status in info:
        if item == descr + " Enclosure " + encid:
            dev_status, state_name = state_table[status]
            return check_temperature(float(reading), params, dev_status = int(dev_status), dev_status_name = state_name)


check_info["emc_datadomain_temps"] = {
    "check_function"        : check_emc_datadomain_temps,
    "inventory_function"    : inventory_emc_datadomain_temps,
    "service_description"   : "Temperature %s",
    "has_perfdata"          : True,
    "group"                 : "temperature",
    "snmp_info"             : (".1.3.6.1.4.1.19746.1.1.2.1.1.1",
                                       [
                                            1, # tempEnclosureID
                                            4, # tempSensorDescription
                                            5, # tempSensorCurrentValue
                                            6, # tempSensorStatus
                                       ]
                            ),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.1.0").startswith("Data Domain OS"),
    "includes"              : [ "temperature.include" ]
}

