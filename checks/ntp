#!/usr/bin/python

ntp_default_levels = (10, 20.0, 50.0) # stratum, ms offset

# Example output from agent:
# <<<ntp>>>
#  42.202.61.100   .INIT.          16 u    - 1024    0    0.000    0.000   0.000
# *42.202.62.100   .PPS.            1 u  143  256  377    0.763   -1.424   0.404
#  42.202.61.14    42.202.62.100    2 u  160  256  357    0.058   -1.532   1.181
#  42.202.62.14    42.202.62.100    2 u  194  256  357    0.131   -1.364   0.598
#  42.202.61.10    .INIT.          16 u    - 1024    0    0.000    0.000   0.000
#  42.202.62.10    .INIT.          16 u    - 1024    0    0.000    0.000   0.000
#  42.202.61.15    42.202.62.100    2 u  196  256  356    0.058    0.574   0.204
#  42.202.62.15    42.202.62.100    2 u  186  256  276    0.088    0.716   0.165
#  127.127.1.0     .LOCL.          10 l   40   64  377    0.000    0.000   0.001

ntp_state_codes = {
  'x' : "falsetick",
  '.' : "excess",
  '-' : "outlyer",
  '+' : "candidat",
  '#' : "selected",
  '*' : "sys.peer",
  'o' : "pps.peer"
}


# We monitor all servers we have reached at least once
def inventory_ntp(checktype, info):
    inventory = []
    for line in info:
 	if line[6] != "0" and line[1] != '.LOCL.':
	    peer = line[0]
            if peer[0] not in "123456789":
	        peer = peer[1:]
            stratum = int(line[2])
	    inventory.append((peer, "ntp_default_levels"))
    return inventory

def check_ntp(item, params, info):
    maxstratum, warn, crit = params
    for peer, refid, stratum, t, when, poll, reach, delay, offset, jitter in info:
	if peer[0] not in "123456789":
	    state = ntp_state_codes[peer[0]]
	    peer = peer[1:]
        else:
	    state = "reject"
        if peer == item:
	    if when == "-" or reach == "0":
		return (2, "CRIT - peer has never been reached")
	    offset  = float(offset)
	    jitter  = float(jitter)
	    when    = int(when)
	    poll    = int(poll)
 	    stratum = int(stratum)
	    perfdata = [ ( "offset",  offset, warn, crit, 0, None ),
			 ( "jitter",  jitter, warn, crit, 0, None ) ]
	    infotext = " - %s - stratum %d, offset %.2f ms, jitter %.2f ms" % (state, stratum, offset, jitter)
	    if offset >= crit:
		return (2, "CRIT - critical offset" + infotext, perfdata)
            elif state in [ "falsetick" ]:
		return (2, "CRIT" + infotext, perfdata)
	    elif when > poll:
		return (2, "CRIT - no response since %d secs%s" % (when - poll, infotext), perfdata)
            elif stratum >= maxstratum:
		return (2, "CRIT - stratum %d is too high (max allowed is %d)" % (stratum, maxstratum - 1))
		
	    elif offset >= warn:
		return (1, "WARN - offset too high" + infotext, perfdata)
	    elif state == "outlyer":
		return (1, "WARN" + infotext, perfdata)
	    else: 
		return (0, "OK" + infotext, perfdata)
	    
    return (3, "UNKNOWN - peer not found")


check_info['ntp']  = (check_ntp, "NTP Peer %s", 1, inventory_ntp)
