#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

def inventory_statgrab_disk(info):
    for line in info:
        if line[0].endswith('read_bytes') or line[0].endswith('write_bytes'):
            return [ ('read', None), ('write', None) ]
    return []

def check_statgrab_disk(item, _no_params, info):
    # item is 'read' or 'write'
    if item != 'read' and item != "write":
        return (3, "invalid item %s" % (item,))

    this_val = 0
    for var, value in info:
        if var.endswith("." + item + "_bytes"):
            this_val += int(value)

    this_time = int(time.time())
    bytes_per_sec = get_rate("diskstat." + item, this_time, this_val)
    perfdata = [ (item, bytes_per_sec) ]
    return 0, "%s/s" % get_bytes_human_readable(bytes_per_sec), perfdata


check_info["statgrab_disk"] = {
    'check_function':          check_statgrab_disk,
    'inventory_function':      inventory_statgrab_disk,
    'service_description':     'Disk IO %s',
    'has_perfdata':            True,
}
