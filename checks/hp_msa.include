#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

hp_msa_state_map = {
    "Up"          : 0,
    "OK"          : 0,
    "Warning"     : 1,
    "Degraded"    : 1,
    "Error"       : 2,
    "Not Present" : 2,
    "Fault"       : 2,
    "Unknown"     : 3,
}


def parse_hp_msa(info):
    info_enrolment = {}
    for line in info:
        if line[2] == "durable-id":
            item_id = " ".join(line[3:])
            if line[0] == "drives":
                item_type = "Disk"
            elif line[0] == "fan":
                item_type = "Fan"
            elif line[0] == "power-supplies":
                item_type = "PSU"
            else:
                item_type = ""
            info_enrolment.setdefault(item_id, {"item_type" : item_type})
        else:
            info_enrolment[item_id][line[2]] = " ".join(line[3:])

    parsed = {}
    for key, values in info_enrolment.items():
        item_name = values.get("location", key).replace("- ", "")
        item_name = (item_name.rsplit("_", 1)[-1]).strip()
        parsed[item_name] = values

    return parsed


def inventory_hp_msa_health(parsed):
    return [ (key, None) for key in parsed ]


def check_hp_msa_health(item, _no_params, parsed):
    if item in parsed:
        infotext = "Status: %s" % parsed[item]["health"]
        health_state = hp_msa_state_map[parsed[item]["health"]]
        health_reason = parsed[item].get("health-reason", "")

        extra_info = ""
        if health_reason:
            extra_info = " (%s)" % health_reason

        if health_state > 0:
            infotext += extra_info

        return health_state, infotext


def inventory_hp_msa_io(parsed):
    return inventory_diskstat_generic([[None, item] for item in parsed])


def check_hp_msa_io(item, params, parsed):
    disks = {}
    for key, values in parsed.items():
        now = time.time()
        disks[key] = {
            "read_throughput"  : get_rate("%s_read" %  key, now, int(values["data-read-numeric"])),
            "write_throughput" : get_rate("%s_write" % key, now, int(values["data-written-numeric"])),
        }

    return check_diskstat_dict(item, params, disks)
