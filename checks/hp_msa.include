#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

hp_msa_state_map = {
    "Up"          : 0,
    "OK"          : 0,
    "Warning"     : 1,
    "Degraded"    : 1,
    "Error"       : 2,
    "Not Present" : 2,
    "Fault"       : 2,
    "Unknown"     : 3,
}


def parse_hp_msa(info):
    info_enrolment = {}
    for line in info:
        if line[2] == "durable-id":
            item_id = " ".join(line[3:])
            info_enrolment.setdefault(item_id, {"item_type" : line[0]})
        else:
            info_enrolment[item_id][line[2]] = " ".join(line[3:])

    parsed = {}
    for key, values in info_enrolment.items():
        item_name = values.get("location", key).replace("- ", "")
        item_name = (item_name.rsplit("_", 1)[-1]).strip()
        parsed[item_name] = values

    return parsed


def inventory_hp_msa_health(parsed):
    return [ (key, None) for key in parsed ]


def check_hp_msa_health(item, _no_params, parsed):
    if item in parsed:
        infotexts = []
        health_state  = hp_msa_state_map[parsed[item]["health"]]
        health_info = "Status: %s" % parsed[item]["health"]
        if health_state and parsed[item].get("health-reason", ""):
            health_info += " (%s)" % parsed[item]["health-reason"]

        infotexts.append(health_info)

        # extra info of volumes
        if parsed[item]["item_type"] == "volumes":
            volume_info = parsed[item].get("container-name", "")
            if volume_info:
                if parsed[item].get("raidtype", ""):
                    volume_info += " (%s)" % parsed[item]["raidtype"]
                infotexts.append("container name: %s" % volume_info)

        # extra info of disks
        elif parsed[item]["item_type"] == "drives":
            for disk_info in ["serial-number", "vendor", "model", "description", "size"]:
                if parsed[item].get(disk_info, ""):
                    infotexts.append("%s: %s" % \
                        (disk_info.replace("-", " "), parsed[item][disk_info].replace("GB", " GB") ))

            if parsed[item].get("rpm", ""):
                infotexts.append("speed: %s RPM" % (parsed[item]["rpm"]))

        return health_state, ", ".join(infotexts)


def inventory_hp_msa_io(parsed):
    return inventory_diskstat_generic([[None, item] for item in parsed])


def check_hp_msa_io(item, params, parsed):
    disks = {}
    for key, values in parsed.items():
        now = time.time()
        disks[key] = {
            "read_throughput"  : get_rate("%s_read" %  key, now, int(values["data-read-numeric"])),
            "write_throughput" : get_rate("%s_write" % key, now, int(values["data-written-numeric"])),
        }

    return check_diskstat_dict(item, params, disks)
