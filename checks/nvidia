#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

nvidia_temp_default_levels = (60, 65, 90, 95)

def inventory_nvidia_temp(info):
    return [ (l[0].strip(":"), "nvidia_temp_default_levels")
            for l in info
            if l[0].strip(":").lower().endswith("temp") ]

def check_nvidia_temp(item, params, info):
    for l in info:
        if l[0].strip(":") == item:
            temp = int(l[1])
            if item == "GPUCoreTemp":
                warn, crit = params[2:4]
            else:
                warn, crit = params[0:2]

            return check_temperature(temp, (warn, crit))

check_info["nvidia.temp"] = {
    'check_function':          check_nvidia_temp,
    'inventory_function':      inventory_nvidia_temp,
    'service_description':     'Temperature NVIDIA %s',
    'has_perfdata':            True,
    'includes':                [ 'temperature.include' ],
}


def inventory_nvidia_errors(info):
    for line in info:
        if line[0] == 'GPUErrors:':
            return [(None, None)]

def check_nvidia_errors(_no_item, _no_params, info):
    for line in info:
        if line[0] == "GPUErrors:":
            errors = int(line[1])
            if errors == 0:
                return (0, "No GPU errors")
            else:
                return (2, "%d GPU errors" % errors)
    return (3, "incomplete output from agent")

check_info["nvidia.errors"] = {
    'check_function':          check_nvidia_errors,
    'inventory_function':      inventory_nvidia_errors,
    'service_description':     'NVIDIA GPU Errors',
    'group':                   'hw_errors',
}
