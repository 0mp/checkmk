#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_mbg_lantime_state_common(info):
    return [(None, {})]

def check_mbg_lantime_state_common(states, _no_item, params, info):
    ntp_state, stratum, refclock_name, refclock_offset = info[0]
    if type(params) != dict:
        params = {
             'stratum' : (params[0], params[1]),
             'offset' : (params[2], params[3]),
        }

    # Handle State
    yield states[ntp_state][0], "State: " + states[ntp_state][1]

    # handle the reported stratum
    state = 0
    levels = ""
    warn, crit = params['stratum']
    if int(stratum) > crit:
        state = 2
    elif int(stratum) > warn:
        state = 1
    if state != 0:
        levels = " (Warn/Crit at %s/%s)" % (warn, crit)
    yield state, "Stratum: %s%s" % (stratum, levels)

    # Add refclock information
    yield 0, 'Refclock: ' + refclock_name

    state = 0
    levels = ""
    warn, crit = params['offset']
    pos_refclock_offset = abs(float(refclock_offset))
    if pos_refclock_offset > crit:
        state = 2
    elif pos_refclock_offset > warn:
        state = 1
    if state != 0:
        levels = " (Warn/Crit at %d/%d ms)"
    perfdata = [('offset', refclock_offset, warn, crit )]
    yield state, 'Refclock Offset: %0.4f ms%s' % (float(refclock_offset) / 1000, levels), perfdata

