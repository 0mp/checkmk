#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

def inventory_bonding(parsed):
    inventory = []
    for bond, status in parsed.items():
        if status["status"] in ("up", "degraded"):
            # If no information about primary interface is available
            # then assume currently active one as primary
            if "primary" not in status and "active" in status:
                params = { "primary" : status["active"]}
            else:
                params = {}
            inventory.append((bond, params))
    return inventory


def check_bonding(item, params, parsed):
    if item not in parsed:
        return (3, "no such bonding interface")
    status = parsed[item]
    if status["status"] not in ("up", "degraded"):
        return 2, "interface is " + status["status"]
    infos = [ "mode: " + status["mode"] ]
    state = 0
    speed = status.get('speed')
    if speed:
        infos.append("Speed:" + speed)
    for eth, slave in status["interfaces"].items():
        if "hwaddr" in slave:
            infos.append("%s/%s %s" % (eth, slave["hwaddr"], slave["status"]))
        else:
            infos.append("%s %s" % (eth, slave["status"]))
        if slave["status"] != 'up':
            state = 1
            infos[-1] += "(!)"

    primary = status.get("primary", params.get("primary"))
    if primary:
        infos.append("primary: " + primary)
    if "active" in status:
        active = status["active"]
        infos.append("active: " + active)

        expect = params.get("expect_active", "ignore")
        if expect in [ "primary", "lowest" ]:
            if expect == "primary":
                expected_active = primary
            else: # "lowest"
                slaves = status["interfaces"].keys()
                slaves.sort()
                expected_active = slaves[0]
            if expected_active != None and expected_active != active:
                infos[-1] += "(!)"
                infos.append("expected is %s" % expected_active)
                state = 1

    infos.append("bond status: " + status["status"])
    if status["status"] != "up":
        infos[-1] += "(!)"
        state = 1

    return state, ", ".join(infos)
