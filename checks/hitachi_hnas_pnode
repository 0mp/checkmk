#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

def hitachi_hnas_pnode_combine_item(id, name):
    combined = str(id)
    if name != "":
        combined += " " + name
    return combined

def inventory_hitachi_hnas_pnode(info):
    inventory = []
    for id, name, status in info:
        inventory.append( (hitachi_hnas_pnode_combine_item(id, name), None) )
    return inventory

def check_hitachi_hnas_pnode(item, _no_params, info):
    statusmap = (("", 3),
                 ("unknown", 3),
                 ("up", 0),
                 ("notUp", 1),
                 ("onLine", 0),
                 ("dead", 2),
                 ("dormant", 2),
                )

    for id, name, status in info:
        if hitachi_hnas_pnode_combine_item(id, name) == item:
            status = int(status)
            if status == 0 or status >= len(statusmap):
                return 3, "PNode reports unidentified status %s" % status
            else:
                return statusmap[status][1], "PNode reports status %s" % statusmap[status][0]

    return 3, "SNMP did not report a status of this PNode"

check_info["hitachi_hnas_pnode"] = {
    "check_function"        : check_hitachi_hnas_pnode,
    "inventory_function"    : inventory_hitachi_hnas_pnode,
    "service_description"   : "PNode %s",
    "has_perfdata"          : False,
    "snmp_info"             : (".1.3.6.1.4.1.11096.6.1.1.1.2.5.9.1", [1, 2, 4]),
                              # ID, Name, Status
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.11096.6"),
}
