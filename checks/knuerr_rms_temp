#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

knuerr_rms_temp_default_levels = (30, 35)


def inventory_knuerr_rms_temp(info):
    return [ (None, 'knuerr_rms_temp_default_levels') ]


def check_knuerr_rms_temp(_no_item, params, info):
    name, rawtemp = info[0]
    status, infotext, perfdata = check_temperature(float(rawtemp) / 10, params)
    infotext += " (%s)" % name
    return status, infotext, perfdata


check_info["knuerr_rms_temp"] = {
    "check_function"        : check_knuerr_rms_temp,
    "inventory_function"    : inventory_knuerr_rms_temp,
    "service_description"   : "Temperature",
    "has_perfdata"          : True,
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.3711.15.1",
    "snmp_info"             : ( ".1.3.6.1.4.1.3711.15.1.1.1.1", [2, 4]),
    "group"                 : "hw_single_temperature",
    "includes"              : [ "temperature.include" ],
}

