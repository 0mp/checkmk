#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<diskstat>>>
# 1300264105
#    8       0 sda 691860 951191 13559915 491748 234686 197346 3359512 94944 0 56844 586312
#    8      32 sdb 791860 91191 23589915 491748 234686 197346 3359512 94944 0 56844 586312

# Fields in /proc/diskstats
#  Index 0 -- major number
#  Index 1 -- minor number
#  Index 2 -- device name
#  Index 3 -- # of reads issued
#  Index 4 -- # of reads merged, 
#  Index 5 -- # of writes merged
#  Index 6 -- # of sectors read (a 512 Byte)
#  Index 7 -- # of milliseconds spent reading
#  Index 8 -- # of writes completed
#  Index 9 -- # of sectors written (a 512 Byte)
#  Index 10 -- # of milliseconds spent writing
#  Index 11 -- # of I/Os currently in progress
#  Index 12 -- # of milliseconds spent doing I/Os
#  Index 13 -- weighted # of milliseconds spent doing I/Os
#
# -> Field 1 has index 3

diskstat_inventory_mode = "single" # also possible: "summary", "legacy"

diskstat_default_levels = {
#    "read" :    (10, 20),   # MB/sec
#    "write" :   (20, 40),   # MB/sec
#    "average" : 15,         # min
}

def inventory_diskstat(checkname, info):
    if diskstat_inventory_mode == "single":
        inventory = []
        for line in info[1:]:
            inventory.append( (line[2], "diskstat_default_levels" ) )
        return inventory
    elif len(info) > 1:
        if diskstat_inventory_mode == "summary":
            return [ ( "summary", "diskstat_default_levels") ]
        else:
            return [ ( "read", None ), ( "write", None ) ]


def check_diskstat_line(this_time, item, params, line):
    average_range = params.get("average")
    perfdata = []
    infos = []
    status = 0
    for what, ctr in [ ("read",  line[5]), ("write", line[9]) ]:
        countername = "diskstat.%s.%s" % (item, what)

        # compute IO rate in bytes/sec
        timedif, sectors_per_sec = get_counter(countername, this_time, int(ctr))
        bytes_per_sec = sectors_per_sec * 512
        infos.append("%s/sec %s" % (get_bytes_human_readable(bytes_per_sec), what))
        perfdata.append( (what, bytes_per_sec) )

        # compute average of the rate over ___ minutes
        if average_range != None:
            timedif, avg = get_average(countername + ".avg", this_time, bytes_per_sec, average_range * 60)
            perfdata.append( (what + ".avg", avg) )
            bytes_per_sec = avg

        # check levels
        levels = params.get(what)
        if levels != None:
            mb_per_sec = bytes_per_sec / 1048576
            warn, crit = levels
            if mb_per_sec >= crit:
                status = 2 
                infos[-1] += "!!"
            elif mb_per_sec >= warn:
                status = max(status, 1)
                infos[-1] += "!"

    if average_range != None:
        perfdata = [ perfdata[0], perfdata[2], perfdata[1], perfdata[3] ]

    return (status, nagios_state_names[status] + " - " + ", ".join(infos) , perfdata)


def check_diskstat(item, params, info):
    # legacy version if item is "read" or "write"
    if item in [ 'read', 'write' ]:
        return check_diskstat_old(item, params, info)

    this_time = int(info[0][0])

    # summary mode
    if item == 'summary': # summary mode
        summary_line = [0] * 13
        for line in info[1:]:
            summary_line = map(lambda e: e[0] + int(e[1]), zip(summary_line, line[3:]))
        return check_diskstat_line(this_time, "SUMMARY", params, ['', '', '' ] + summary_line)

    # single mode
    for line in info[1:]:
        if line[2] == item:
            return check_diskstat_line(this_time, item, params, line)
    
    return (3, "UNKNOWN - device missing")


# This is the legacy version of diskstat as used in <= 1.1.10. 
# We keep it here for a while in order to be compatible with
# old installations.
def check_diskstat_old(item, params, info):
    # sum up over all devices
    if item == 'read':
        index = 5 # sectors read
    elif item == 'write':
        index = 9 # sectors written
    else:
        return (3, "UNKNOWN - invalid item %s" % (item,))

    this_time = int(info[0][0])
    this_val  = sum([int(x[index]) for x in info[1:]])

    timedif, per_sec = get_counter("diskstat." + item, this_time, this_val)
    mb_per_s = per_sec / 2048.0    # Diskstat output is in sectors a 512 Byte
    perfdata = [ (item, "%dc" % this_val ) ]
    return (0, "OK - %.1fMB/s (in last %d secs)" % (mb_per_s, timedif), perfdata)


check_info['diskstat'] = (check_diskstat, "Disk IO %s", 1,  inventory_diskstat)
