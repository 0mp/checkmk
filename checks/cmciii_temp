#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Table columns:
# 0: index
# 1: sensor type (10 = temperature)
# 2: sensor state (4 = ok)
# 3: current value (temperature)
# 4: critical level
# 5: warn low level
# 6: warn level
# 7: description

def inventory_cmciii_temp(info):
    if info[0][1]:
        return [ (None, None)]

def check_cmciii_temp(item, params, info):
    line = info[0]
    stati = {
       "OK" : 0,
       "Warning" : 1,
       "Low Warn" : 1,
       "Too High" : 2,
       "Too Low" : 2,
       }
    descr = line[0]
    temp = float(line[1].split(" ")[0])
    status = line[8]

    info_text = "%s is %s at %dÂ°C" % (descr, status, temp)

    if params: # if limits set by check_mk
        warn, crit = params
    else: # otherwise take limits as configured in device
        warn = line[4].split(" ")[0]
        crit = line[3].split(" ")[0]

    lower_warn = line[6].split(" ")[0]
    lower_crit = line[5].split(" ")[0]
    levels_text = " (upper/lower warn/crit at %sC/%sC/%sC/%sC )" % (lower_crit, lower_warn, warn, crit)

    perfdata = [ ("temp", temp, warn, crit, 0 ) ]

    state = stati.get(status, 3)
    return (state, info_text + levels_text, perfdata)

check_info['cmciii_temp'] = {
    "check_function"      : check_cmciii_temp,
    "inventory_function"  : inventory_cmciii_temp,
    "has_perfdata"        : True,
    "service_description" : "Temperature",
    "group"               : "room_temperature",
    "snmp_scan_function"  : lambda oid: "Rittal CMC III PU" in oid(".1.3.6.1.2.1.1.1.0"),
    "snmp_info"           : (
       ".1.3.6.1.4.1.2606.7.4.2.2.1.10.1",
       [ "1", # DescName
         "2", # Value
         "3", # Offset
         "4", # SetPtHighAlarm
         "5", # SetPtHighWarning
         "6", # SetPtLowWarning
         "7", # SetPtLowAlarm
         "8", # Hysteresis (Taupunkt)
         "9", # Status
       ]
   ),
}
