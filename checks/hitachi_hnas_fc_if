#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def hitachi_hnas_fc_if_convert_info(info):
    converted = []
    for line in info:
        convertedline = []
        convertedline.append("%d%03d" % (int(line[0]), int(line[1]))) # ifIndex
        # use ClusterNode.InterfaceIndex as description too, because 
        # we have no explicit Descr
        convertedline.append(line[0] + "." + line[1])     # ifDescr
        # ifType 56 fibreChannel
        convertedline.append("56")                        # ifType
        convertedline.append(str(int(line[3]) * 1000000000)) # ifHighSpeed
        if line[2] == "1":                                # ifOperStatus
            convertedline.append("1")
        else:
            convertedline.append("2")
        convertedline.append(line[4])                     # ifHCInOctets
        convertedline.append("0")                         # ifHCInUcastPkts
        convertedline.append("0")                         # ifHCInMulticastPkts
        convertedline.append("0")                         # ifHCInBroadcastPkts 
        convertedline.append(line[11])                    # ifInDiscards
        convertedline.append(str(int(line[6]) + int(line[7]) + int(line[8]) \
            + int(line[9]) + int(line[10]) + int(line[12]) + int(line[13])))
                                                          # ifInErrors
        convertedline.append(line[5])                     # ifHCOutOctets
        convertedline.append("0")                         # ifHCOutUcastPkts
        convertedline.append("0")                         # ifHCOutMulticastPkts
        convertedline.append("0")                         # ifHCOutBroadcastPkts
        convertedline.append("0")                         # ifOutDiscards
        convertedline.append("0")                         # ifOutErrors
        convertedline.append("0")                         # ifOutQLen
        # use ClusterNode.InterfaceIndex as alias too, because 
        # we have no explicit alias
        convertedline.append(line[0] + "." + line[1])     # ifAlias
        convertedline.append("")                          # ifPhysAddress

        converted.append(convertedline)
    return converted

def inventory_hitachi_hnas_fc_if(info):
    converted = hitachi_hnas_fc_if_convert_info(info)
    return inventory_if_common(converted)

def check_hitachi_hnas_fc_if(item, params, info):
    converted = hitachi_hnas_fc_if_convert_info(info)
    return check_if_common(item, params, converted)
    

check_info["hitachi_hnas_fc_if"] = {
    "check_function"         : check_hitachi_hnas_fc_if,
    "inventory_function"     : inventory_hitachi_hnas_fc_if,
    "includes":                [ "if.include" ],
    "service_description"    : "Interface FC %s",
    "has_perfdata"           : True,
    "snmp_info"              : (".1.3.6.1.4.1.11096.6.1.1.1.3.6.25.1", [
        1,  # fcStatsClusterNode           0
        2,  # fcStatsInterfaceIndex        1
        4,  # fcStatsInterfaceStatus       2
        5,  # fcStatsInterfaceLinkSpeed    3
        7,  # fcStatsInstantaneousInRate   4
        8,  # fcStatsInstantaneousOutRate  5
        13, # fcStatsSignalLossErrors      6
        14, # fcStatsBadRXCharErrors       7
        15, # fcStatsLossSyncErrors        8
        16, # fcStatsLinkFailErrors        9
        17, # fcStatsRXEOFErrors          10
        18, # fcStatsDiscardedFrameErrors 11
        19, # fcStatsBadCRCErrors         12
        20, # fcStatsProtocolErrors       13
    ]),
    "snmp_scan_function"     : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.11096.6"),
    "group":                   "if",
    "default_levels_variable": "if_default_levels",
}

