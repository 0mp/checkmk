#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

masterguard_power_default_levels = (20, 1) # warning / critical 

def check_masterguard_power(item, params, info):
    warn, crit = params
    for line in info:
        if line[0] == item:
            power = saveint(line[1])
            # Some "RPS SpA" systems are not RFC conform in this value.
            # The values can get negative but should never be.
            if power < 0:
                power *= -1
            perfdata = [ ( "power", power, warn, crit, 0 ) ]
            infotext = " - current power: %dW (warn/crit at %dW/%dW)" % \
                (power, warn, crit)

            if power <= crit:
                return (2, "CRIT" + infotext, perfdata)
            elif power <= warn:
                return (1, "WARN" + infotext, perfdata)
            else:
                return (0, "OK" + infotext, perfdata)

    return (3, "UNKNOWN - Phase %s not found in SNMP output" % item)

check_info['masterguard_power'] = {
  "inventory_function"  : lambda info: [ ( x[0], "masterguard_power_default_levels") for x in info ],
  "check_function"      : check_masterguard_power,
  "service_description" : "Power phase %s",
  "has_perfdata"        : True,
  "group"               : "hw_temperature",
  "snmp_info"           : ( ".1.3.6.1.2.1.33.1.4.4.1", [ 0, 4 ] ),
  "snmp_scan_function"  : lambda oid: "masterguard" in oid('.1.3.6.1.2.1.1.1.0').lower(),
}
