#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

memused_default_levels = (150.0, 200.0)

def parse_statgrab_mem(info):
    for var, value in info:
        if var == 'mem.used':     memused_kb   = int(value) / 1024
        elif var == 'mem.total':  totalmem_kb  = int(value) / 1024
        elif var == 'swap.used':  swapused_kb  = int(value) / 1024 / 4 # BUG in statgrab und Solaris?
        elif var == 'swap.total': totalswap_kb = int(value) / 1024 / 4
        elif var == 'mem.cache':  caches_kb    = int(value) / 1024

    return {
        "MemTotal"  : totalmem_kb,
        "MemFree"   : totalmem_kb - memused_kb,
        "SwapTotal" : totalswap_kb,
        "SwapFree"  : totalswap_kb - swapused_kb,
        "Cached"    : caches_kb,
    }


def inventory_statgrab_mem(parsed):
    return [(None, 'memused_default_levels')]


def check_statgrab_mem(_no_item, params, parsed):
    return check_memory(params, parsed)


check_info["statgrab_mem"] = {
    'parse_function'      : parse_statgrab_mem,
    'inventory_function'  : inventory_statgrab_mem,
    'check_function'      : check_statgrab_mem,
    'service_description' : 'Memory used',
    'has_perfdata'        : True,
    'group'               : "memory",
    'includes'            : [ "mem.include" ],
}
