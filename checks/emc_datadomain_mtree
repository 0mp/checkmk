#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de


def inventory_emc_datadomain_mtree(info):
    for line in info:
        yield line[0], None


def check_emc_datadomain_mtree(item, _no_params, info):
    state_table = {
        "0": ("unknown",                   3),
        "1": ("deleted",                   2),
        "2": ("read-only",                 1),
        "3": ("read-write",                0),
        "4": ("replication destination",   0),
        "5": ("retention lock enabled",    0),
        "6": ("retention lock disabled",   0),
    }
    for line in info:
        if item == line[0]:
            dev_name = line[0]
            dev_precomp = line[1]
            dev_state = line[2]
            dev_state_str, dev_state_rc = state_table.get(dev_state, ("invalid code %s" % dev_state, 3))
            precompiled = int(float(dev_precomp) * 1024 * 1024 * 1024)
            perfdata = [('precompiled', precompiled)]
            infotext = "Status: %s, Precomiled: %s" % (dev_state_str, get_bytes_human_readable(precompiled))
            return dev_state_rc, infotext, perfdata


check_info["emc_datadomain_mtree"] = {
    "check_function"        : check_emc_datadomain_mtree,
    "inventory_function"    : inventory_emc_datadomain_mtree,
    "service_description"   : "MTree %s",
    "has_perfdata"          : True,
    "snmp_info"             : (".1.3.6.1.4.1.19746.1.15.2.1.1",
                                       [
                                            2, # MtreeListName
                                            3, # MtreeListPreComGi
                                            4, # MtreeListStatus
                                       ]
                            ),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.1.0").startswith("Data Domain OS")
}
