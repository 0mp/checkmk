#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de


ups_out_load_default_levels = (85, 90) # warning / critical

def inventory_ups_out_load(info):
    if len(info) > 0:
        return [ ( x[0], "ups_out_load_default_levels") for x in info if int(x[1]) > 0]

def check_ups_out_load(item, params, info):
    warn, crit = params
    for line in info:
	if line[0] == item:
	    power = int(line[1])
	    perfdata = [ ( "out_load", power, warn, crit, 100 ) ]
	    infotext = "load: %d (warn/crit at %d/%d) " % \
	 	(power, warn, crit)

	    if power >= crit:
		return (2, infotext, perfdata)
	    elif power >= warn:
		return (1, infotext, perfdata)
	    else:
		return (0, infotext, perfdata)

    return (3, "Phase %s not found in SNMP output" % item)

check_info['ups_out_load'] = {
  "inventory_function"  : inventory_ups_out_load,
  "check_function"      : check_ups_out_load,
  "service_description" : "OUT load phase %s",
  "has_perfdata"        : True,
  "snmp_info"           : ( ".1.3.6.1.2.1.33.1.4.4.1", [ 0, 5 ] ),
  "snmp_scan_function"  : lambda oid: oid(".1.3.6.1.2.1.1.2.0") in \
                         [ ".1.3.6.1.4.1.534.1", ".1.3.6.1.4.1.705.1",".1.3.6.1.4.1.705.1.2", ".1.3.6.1.4.1.818.1.100.1.1",
                           ".1.3.6.1.2.1.33.2", ".1.3.6.1.4.1.5491.6", ".1.3.6.1.4.1.232.165.3",
                           ".1.3.6.1.4.1.476.1.42", ".1.3.6.1.4.1.818.1.100.1.2" ] \
                           or oid(".1.3.6.1.2.1.1.2.0").startswith('.1.3.6.1.2.1.33')
}
