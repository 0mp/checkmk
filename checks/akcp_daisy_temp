#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

akcp_daisy_temp_defaultlevels = (28, 32)


def inventory_akcp_daisy_temp(info):
    inventory = []
    for port, subport, name, temp in info:
        # Ignore sensors that are found by the non-daisychaining-version of
        # this check (akcp_sensor_temp)
        if subport not in [ '-1', '0' ]:
            inventory.append((name, 'akcp_daisy_temp_defaultlevels' ))
    return inventory


def check_akcp_daisy_temp(item, params, info):
    for port, subport, name, rawtemp in info:
        if name == item:
            temp = float(rawtemp) / 10
            return check_temperature(temp, params)

    return 3, "Sensor not found in SNMP data"


check_info["akcp_daisy_temp"] = {
    'check_function':          check_akcp_daisy_temp,
    'inventory_function':      inventory_akcp_daisy_temp,
    'service_description':     'Temperature %s',
    'has_perfdata':            True,
    'snmp_info':               (
        ".1.3.6.1.4.1.3854.1.2.2.1.19.33",
            [ 1, 2, 3, 4, 5, 6, 7, 8 ],
            [
             OID_END, # Port/Subport
             "2.1.1", # subport
             "2.1.2", # Sensor Name
             "2.1.14", # Degree Celsius
            ]
    ),
    'snmp_scan_function':  lambda oid: oid(".1.3.6.1.2.1.1.2.0") in \
                         [ ".1.3.6.1.4.1.3854.1.2.2.1.1", ".1.3.6.1.4.1.3854.1" ] \
                         and not oid('.1.3.6.1.4.1.3854.2.*') \
                         and oid('.1.3.6.1.4.1.3854.1.2.2.1.19.*'),
    'group'             :  'room_temperature',
    'includes'          : [ 'temperature.include' ],
}
