#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
# 
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
# 
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


memused_default_levels = (150.0, 200.0)
mem_extended_perfdata = False

def parse_proc_meminfo(info):
    return dict([ (i[0][:-1], int(i[1])) for i in info ])

def inventory_mem_used(checkname, info):
   try:
      # simply try potential check. If it returns
      # valid data, assume that item can be checked
      ci = check_mem_used(None, (0,0), info)
      if ci[0] <= 2:
          return [(None, "", "memused_default_levels")]
      else: return []
   except:
      return []
              
def check_mem_used(item, params, info):
    try:
        meminfo = parse_proc_meminfo(info)
        swapused = meminfo['SwapTotal'] - meminfo['SwapFree']
        memused  = meminfo['MemTotal']  - meminfo['MemFree']
        # Buffers and Cached are optional (not supported on Windows yet)
        caches   = meminfo.get('Buffers', 0) + meminfo.get('Cached', 0)
    except:
        return (3, "UNKNOWN - invalid output from plugin")

    # Add extended memory performance data, if this is
    # enabled and the agent provides that information.
    extended_perf = []
    extrainfo = ""
    if mem_extended_perfdata:
        mapped = meminfo.get('Mapped')
        if mapped:
            mapped_mb = int(mapped) / 1024
            committed_as = meminfo.get('Committed_AS')
            if committed_as:
                committed_as_mb = int(committed_as) / 1024
            else:
                committed_as = 0
            extended_perf = [
                ('mapped',       str(mapped_mb)       + 'MB', '', '', 0, ''),
                ('committed_as', str(committed_as_mb) + 'MB', '', '', 0, ''),
            ]
            extrainfo = ", %.1f GB mapped, %.1f GB committed" % \
                        (mapped_mb / 1024.0, committed_as_mb / 1024.0)

    totalused_kb = (swapused + memused - caches) 
    totalused_mb = totalused_kb / 1024
    totalmem_kb = meminfo['MemTotal']
    totalmem_mb = totalmem_kb / 1024
    totalused_perc = 100 * (float(totalused_kb) / float(totalmem_kb))
    totalvirt_mb = (meminfo['SwapTotal'] + meminfo['MemTotal']) / 1024
    warn, crit = params

    perfdata = [ 
        ('ramused', str( (memused - caches) / 1024) + 'MB', '', '', 0, totalmem_mb),
        ('swapused', str(swapused / 1024) + 'MB', '', '', 0, meminfo['SwapTotal']/1024) ]

    # levels may be given either in int -> MB or in float -> percentages

    infotext = ("%.2f GB RAM+SWAP used (this is %.1f%% of RAM size)" % \
               (totalused_mb / 1024.0, totalused_perc)) \
               + extrainfo
    
    if type(warn) == float:
        perfdata.append(('memused', str(totalused_mb)+'MB', int(warn/100.0 * totalmem_mb), int(crit/100.0 * totalmem_mb), 0, totalvirt_mb))
        perfdata += extended_perf
        if totalused_perc >= crit:
            return (2, 'CRIT - %s, critical at %.1f%%' % (infotext, crit), perfdata)
        elif totalused_perc >= warn:
            return (1, 'WARN - %s, warning at %.1f%%' % (infotext, warn), perfdata)
        else:
            return (0, 'OK - %s' % infotext, perfdata)

    else:
        perfdata.append(('memused', str(totalused_mb)+'MB', warn, crit, 0, totalvirt_mb))
        perfdata += extended_perf
        if totalused_mb >= crit:
            return (2, 'CRIT - %s, critical at %.2f GB' % (infotext, crit / 1024.0), perfdata)
        elif totalused_mb >= warn:
            return (1, 'WARN - %s, warning at %.2f GB' % (infotext, warn / 1024.0), perfdata)
        else:
            return (0, 'OK - %s' % infotext, perfdata)


check_info['mem.used'] = (check_mem_used, "Memory used", 1,  inventory_mem_used)
check_config_variables.append("mem_extended_perfdata")

# -------------------------------------------------------------------------------- 
# Check for virtual address space in kernel (VMALLOC)
# -------------------------------------------------------------------------------- 

# warn, crit, warn_chunk, crit_chunk. Integers are in MB, floats are in percent
mem_vmalloc_default_levels = ( 80.0, 90.0, 32, 64 )

def inventory_mem_vmalloc(checktype, info):
    meminfo = parse_proc_meminfo(info)
    if "VmallocTotal" in meminfo:
        return [ (None, "mem_vmalloc_default_levels") ]
    else:
        return []

def check_mem_vmalloc(item, params, info):
    meminfo = parse_proc_meminfo(info)
    total_mb = meminfo["VmallocTotal"] / 1024.0
    used_mb  = meminfo["VmallocUsed"] / 1024.0
    free_mb  = total_mb - used_mb
    chunk_mb = meminfo["VmallocChunk"] / 1024.0
    warn, crit, warn_chunk, crit_chunk = params
    
    state = 0
    infotxts = []
    perfdata = []
    for var, w, c, v, neg, what in [
        ( "used",  warn,       crit,       used_mb,  False, "used" ),
        ( "chunk", warn_chunk, crit_chunk, chunk_mb, True,  "largest chunk" )]:

        # convert levels from percentage to MB values
        if type(w) == float:
            w_mb = total_mb * w / 100
        else:
            w_mb = float(w)
    
        if type(c) == float:
            c_mb = total_mb * c / 100
        else:
            c_mb = float(c)

        infotxt = "%s %.1f MB" % (what, v)
        if (v >= c_mb) != neg:
            s = 2
            infotxt += " (critical at %.1f MB!!)" % c_mb
        elif (v >= w_mb) != neg:
            s = 1
            infotxt += " (warning at %.1f MB!)" % w_mb
        else:
            s = 0
        state = max(state, s)
        infotxts.append(infotxt)
        perfdata.append( (var, v, w_mb, c_mb, 0, total_mb) )
    return (state, nagios_state_names[state] + (" - total %.1f MB, " % total_mb) + ", ".join(infotxts), perfdata)

check_info["mem.vmalloc"] = (check_mem_vmalloc, "Vmalloc address space", 1, inventory_mem_vmalloc)

