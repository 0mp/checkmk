#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example output from agent:
# <<<zfslist>>>
# bpool                   12.0T  19.1T  /bpool
# bpool/diskcache_fs      12.0T  19.1T  /backup/diskcache
# rpool                   20.2G   893G  /rpool
# rpool/ROOT              3.33G  4.67G  legacy
# rpool/ROOT/zfsroot      3.33G  4.67G  /
# rpool/ROOT/zfsroot/var  1.84G  4.67G  /var
# rpool/dump              8.00G   893G  -
# rpool/export             845M   887G  /export
# rpool/export/home       3.67M   887G  /home
# rpool/export/opt         842M   887G  /opt
# rpool/swap              8.00G   893G  -
#
# The columns are: name, used, avail, mountpoint


def inventory_zfslist(info):
    mplist = []
    for name, used, avail, mountpoint in info:
        if mountpoint not in inventory_df_exclude_mountpoints \
            and mountpoint != '-':
            mplist.append(mountpoint)
    return df_inventory(mplist)

def convert_zfssize(txt):
    units_to_mb = {
        'K'  : 1/1024.0,
        'M'  : 1.0,
        'G'  : 1024.0,
        'T'  : 1024 * 1024.0,
        'P'  : 1024 * 1024 * 1024.0,
    }
    return float(txt[:-1]) * units_to_mb[txt[-1]]


def check_zfslist(item, params, info):
    fslist = []
    for name, used_txt, avail_txt, mountpoint in info:
        if "patterns" in params or item == mountpoint:
            used_mb = convert_zfssize(used_txt)
            avail_mb = convert_zfssize(avail_txt) 
            size_mb = used_mb + avail_mb
            fslist.append((mountpoint, size_mb, avail_mb))

    return df_check_filesystem_list(item, params, fslist)


check_info['zfslist'] = {
    "check_function"          : check_zfslist,
    "inventory_function"      : inventory_zfslist,
    "service_description"     : "fs_%s",
    "has_perfdata"            : True,
    "group"                   : "filesystem",
    "default_levels_variable" : "filesystem_default_levels",
    "includes"                : [ "df.include" ],
}
