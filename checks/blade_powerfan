#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |                     _           _           _                    |
# |                  __| |_  ___ __| |__  _ __ | |__                 |
# |                 / _| ' \/ -_) _| / / | '  \| / /                 |
# |                 \__|_||_\___\__|_\_\_|_|_|_|_\_\                 |
# |                                   |___|                          |
# |              _   _   __  _         _        _ ____               |
# |             / | / | /  \| |__  ___| |_ __ _/ |__  |              |
# |             | |_| || () | '_ \/ -_)  _/ _` | | / /               |
# |             |_(_)_(_)__/|_.__/\___|\__\__,_|_|/_/                |
# |                                            check_mk 1.1.0beta17  |
# |                                                                  |
# | Copyright Mathias Kettner 2009             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
# 
# This file is part of check_mk 1.1.0beta17.
# The official homepage is at http://mathias-kettner.de/check_mk.
# 
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_blade_powerfan(checkname, info):
   return [ (line[0], line[4] + "% of max", '(40, 50)') for line in info if line[1] == '1' ]

def check_blade_powerfan(item, params, info):
   warn_perc, crit_perc = params
   for index, present, status, fancount, speedperc, rpm, ctrlstate in info:
      if index != item: continue
      perfdata=[ ('perc', speedperc, warn_perc, crit_perc, "0", "100" ),
                 ('rpm', rpm ) ]
      speedperc_int = int(speedperc)
      if present != "1":
         return (2, "CRIT - Fan not present", perfdata)
      elif status != "1":
         return (2, "CRIT - Status not OK", perfdata)
      elif ctrlstate != "0":
         return (2, "CRIT - Controller state not OK", perfdata)
      elif speedperc_int <= crit_perc:
         return (2, "CRIT - Speed at %d%% of max (crit at %d%%)" % (speedperc_int, crit_perc), perfdata)
      elif speedperc_int <= warn_perc:
         return (1, "WARNING - Speed at %d%% of max (warning at %d%%)" % (speedperc_int, warn_perc), perfdata)
      else:
         return (0, "OK - Speed at %s RPM (%d%% of max)" % (rpm, speedperc_int), perfdata)
         
   return (3, "UNKNOWN - Device %s not found in SNMP data" % item)

check_info['blade_powerfan'] = (check_blade_powerfan, "Power Module Cooling Device %s", 1,  inventory_blade_powerfan)
snmp_info['blade_powerfan'] = ( "enterprises.2.3.51.2.2.6.1.1", [ 1, 2, 3, 4, 5, 6, 7 ] ) # BLADE-MIB
