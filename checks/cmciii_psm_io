#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_cmciii_psm_io(info):
    inventory = []
    info_transposed = map(list, zip(*info))
    for bus_id in range(0,len(info_transposed)):
        bus = info_transposed[bus_id]
        if re.match('^\d:Off / \d:On$',bus[2]):
            for line_num in range(0,len(bus)-1):
                if (line_num - 1) % 6 == 0   and bus[line_num + 2 ] != "":
                    item = str(bus_id)+"-"+str(line_num)
                    inventory.append((item, None))
    return inventory

def check_cmciii_psm_io(item, params, info):
    bus, unit = map(int,item.split("-"))
    descr = info[unit-1][bus]
    print descr
    if re.match('^\d:Off / \d:On$',info[unit+1][bus]):
        value = info[unit][bus]
        logic = info[unit+1][bus]
        delay = info[unit+2][bus]
        status = info[unit+3][bus]
        if value == "0":
            state = 0
            sym = ""
        else:
            state = 1
            sym = "(!)"
        infotext =  "Input: %s, Value %s%s, Logic %s, Delay %s, Status %s" \
            % ( descr, value, sym, logic, delay, status )
    elif re.match('^\d:Off / \d:On$',info[unit+2][bus]):
        relay = info[unit][bus]
        grouping = info[unit+1][bus]
        logic = info[unit+2][bus]
        status = info[unit+3][bus]
        if status == "Off":
            state = 0
            sym = ""
        else:
            state = 1
            sym = "(!)"
        infotext =  "Output: %s, Relay %s, Grouping %s, Logic %s, Status %s%s" \
            % ( descr, relay, grouping, logic, status, sym )
    else:
        infotext = "no valid SNMP data found for unit"
        state = 3

    return (state, infotext)

check_info['cmciii_psm_io'] = {
    "check_function"      : check_cmciii_psm_io,
    "inventory_function"  : inventory_cmciii_psm_io,
    "has_perfdata"        : False,
    "service_description" : "IO Unit %s",
    "snmp_scan_function"  : lambda oid: "Rittal CMC III PU" in oid(".1.3.6.1.2.1.1.1.0"),
    "snmp_info"           : (
      #".1.3.6.1.4.1.2606.7.4.1.2.1", "2",
      ".1.3.6.1.4.1.2606.7.4.2.2.1.10", [OID_END]+range(1,9)    # read complete subtree :(
    )
}

