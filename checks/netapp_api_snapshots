#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Agent output:
# <<<netapp_api_snapshots:sep(9)>>>
# volume_snapshot volch150    percent-reserved 22 blocks-reserved 3322    size-total 12122 ...
# volume_snapshot volch150    percentage-of-total-blocks 0 cumulative-total 122924 ...

def inventory_netapp_api_snapshots(parsed):
    for key in parsed.keys():
        yield key, {}

def check_netapp_api_snapshots(item, _no_params, parsed):
    data = parsed.get(item)

    if not data:
        return

    snapshot_total   = int(data[-1]["cumulative-total"]) * 1024.0
    size_total       = int(data[0]["size-total"])
    reserved_percent = snapshot_total / size_total
    reserved_bytes   = int(data[0]["blocks-reserved"]) * 1024.0

    state = 0
    if reserved_percent > 100:
        state = 2
    yield state, "Reserve used: %.1f%% (%s)" % (reserved_percent,
                                                get_bytes_human_readable(snapshot_total))

    yield 0, "Total Reserve: %s%% (%s) of %s" % (data[0]["percent-reserved"],
                                                 get_bytes_human_readable(reserved_bytes),
                                                 get_bytes_human_readable(size_total)),\
                                                 [("bytes", snapshot_total, 0, 0, 0, reserved_bytes)]

check_info["netapp_api_snapshots"] = {
    'parse_function'          : lambda info: netapp_api_parse_lines(info,
                                custom_keys = ["volume_snapshot"], as_dict_list = True),
    'check_function'          : check_netapp_api_snapshots,
    'inventory_function'      : inventory_netapp_api_snapshots,
    'service_description'     : 'Snapshots Volume',
    'has_perfdata'            : True,
    'includes'                : ["netapp_api.include"]
}

