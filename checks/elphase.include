#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

def inventory_elphase(parsed):
    for item in parsed.keys():
        yield item, {}


# Parsed has the following form:
# parsed = {
#    "Phase 1" : {
#        "voltage" : (220.17, (1, "Voltage is too low")), # with device state
#        "current" : 12.0,                                # without device state
#     }
# }
def check_elphase(item, params, parsed):
    def tostring(value):
        if type(value) == int:
            return "%d" % value
        else:
            return "%.1f" % value

    class Bounds:
        Lower, Upper, Both = range(3)

    for what, title, unit, bound in [
        ( "voltage",     "Voltage",        " V",  Bounds.Lower, ),
        ( "current",     "Current",        " A",  Bounds.Upper, ),
        ( "output_load", "Load",           "%",   Bounds.Upper, ),
        ( "power",       "Power",          " W",  Bounds.Upper, ),
        ( "appower",     "Apparent Power", " VA", Bounds.Upper, ),
        ( "energy",      "Energy",         " Wh", Bounds.Upper, ),
        ( "frequency",   "Frequency",      " hz", Bounds.Both,  ),
    ]:

        if what in parsed[item]:
            entry = parsed[item][what]
            if type(entry) == tuple:
                value, state_info = entry # (220.17, (1, "Voltage is too low"))
            else:
                value = entry             # 12.0
                state_info = None
            infotext = "%s: %s%s" % (title, tostring(value), unit)

            status = 0
            if what in params:
                warn_lower = crit_lower = warn = crit = None
                if bound == Bounds.Both:
                    warn_lower, crit_lower, warn, crit = params[what]
                elif bound == Bounds.Upper:
                    warn, crit = params[what]
                else:  # Bounds.Lower
                    warn_lower, crit_lower = params[what]

                if warn_lower:
                    levelstext = " (warn/crit below %s/%s%s)" %\
                        (tostring(warn_lower), tostring(crit_lower), unit)
                    if value < crit_lower:
                        status = 2
                        infotext += levelstext
                    elif value < warn_lower:
                        status = max(status, 1)
                        infotext += levelstext

                if warn:
                    levelstext = " (warn/crit at %s/%s%s)" %\
                        (tostring(warn), tostring(crit), unit)
                    if value > crit:
                        status = 2
                        infotext += levelstext
                    elif value > warn:
                        status = max(status, 1)
                        infotext += levelstext

                perfdata = [ (what, value, warn, crit) ]
            else:
                perfdata = [ (what, value) ]

            yield status, infotext, perfdata
            if state_info:
                yield state_info
