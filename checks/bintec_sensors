#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def bintec_sensors_scan(oid):
    return oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.272.4")

bintec_sensors_info = ( ".1.3.6.1.4.1.272.4.17.7.1.1.1", [
                             2, # sensorNumber
                             3, # sensorDescr
                             4, # sensorType
                             5, # sensorValue
                             7, # sensorMeasurementUnit
                      ])

#   .--fans----------------------------------------------------------------.
#   |                          __                                          |
#   |                         / _| __ _ _ __  ___                          |
#   |                        | |_ / _` | '_ \/ __|                         |
#   |                        |  _| (_| | | | \__ \                         |
#   |                        |_|  \__,_|_| |_|___/                         |
#   |                                                                      |
#   '----------------------------------------------------------------------'

bintec_sensors_fan_default_levels = { "lower": ( 1000, 2000), "upper": (8000, 8400) }

def inventory_bintec_sensors_fan(info):
    inventory = []
    for sensor_id, sensor_descr, sensor_type, sensor_value, sensor_unit in info:
        if sensor_type == "2":
            inventory.append( (sensor_descr, "bintec_sensors_fan_default_levels" ) )
    return inventory

def check_bintec_sensors_fan(item, params, info):
    for sensor_id, sensor_descr, sensor_type, sensor_value, sensor_unit in info:
        status = 0
        perfdata = []
        if sensor_descr == item:
            sensor_value = int(sensor_value)
            if sensor_value <= params["lower"][1] or sensor_value >= params["upper"][0]:
                status = 1
            if sensor_value <= params["lower"][0] or sensor_value >= params["upper"][1]:
                status = 2

            message = "%s is at %s %s" % (sensor_descr, sensor_value, sensor_unit)
            perfdata = [ ("rpm", sensor_value, "%d:%d" % (params["lower"][1], params["upper"][0]), \
                       "%d:%d" % (params["lower"][0], params["upper"][1]), 0) ]

            return status, message, perfdata

    return 3, "Sensor %s not found" % item

check_info["bintec_sensors.fan"] = {
    "check_function"        : check_bintec_sensors_fan,
    "inventory_function"    : inventory_bintec_sensors_fan,
    "service_description"   : "%s",
    "group"                 : "hw_fans",
    "has_perfdata"          : True,
    "snmp_info"             : bintec_sensors_info,
    "snmp_scan_function"    : bintec_sensors_scan,
}

#.
