#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_cmciii_fanunit_airtemp(info):
    if len(info) == 2:
        return [( None, None )]

def check_cmciii_fanunit_airtemp(item, params, info):
    status = info[1][-1]
    # extract limits for inflow and outflow 
    # extract internal names to determine in/out direction for sensor
    # check temps against the limits and build infotext
    for i in range(1, len(info[1])-1):
        line = info[1]
    descr = line[0]
    temp = float(line[1].split(" ")[0])
    status = line[8]

    info_text = "%s is %s at %dÂ°C" % (descr, status, temp)

    if params: # if limits set by check_mk
        warn, crit = params
    else: # otherwise take limits as configured in device
        warn = line[4].split(" ")[0]
        crit = line[3].split(" ")[0]

    lower_warn = line[6].split(" ")[0]
    lower_crit = line[5].split(" ")[0]
    levels_text = " (upper/lower warn/crit at %sC/%sC/%sC/%sC )" % (lower_crit, lower_warn, warn, crit)

    perfdata = [ ("temp", temp, warn, crit, 0 ) ]

    state = stati.get(status, 3)
    return (state, info_text + levels_text, perfdata)

def cfa_scan_function(oid):
    value = oid(".1.3.6.1.4.1.2606.7.4.2.2.1.3.2.6")
    print value
    return value.startswith("Air.Temperature.DescName")

check_info['cmciii_fanunit_airtemp'] = {
    "check_function"      : check_cmciii_fanunit_airtemp,
    "inventory_function"  : inventory_cmciii_fanunit_airtemp,
    "has_perfdata"        : True,
    "service_description" : "%s",
    "snmp_scan_function"  : lambda oid: oid(".1.3.6.1.4.1.2606.7.4.2.2.1.3.2.6") == "Air.Temperature.DescName",
    "snmp_info"           : ( '.1.3.6.1.4.1.2606.7.4.2.2.1',
       [ '3', '10' ],
       [ '2.6', '2.7', '2.8', '2.9', '2.10', '2.11', '2.12', '2.13' ]
   ),
}
# have 2 checks for in- and out-flow with item "IN" and "OUT"
# use descName for the whole unit and also the flow
# consult branch 3 to select / use the right item
# show average and status and all individual values
# extract TOP, MID, BOTTOM designators from branch 3 for indiv. vals
# use status from snmp, dont test individual vals against limits
# and thus do not get the limits
#
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.6 Air.Temperature.DescName
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.7 Air.Temperature.In-Top
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.8 Air.Temperature.In-Mid
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.9 Air.Temperature.In-Bot
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.10 Air.Temperature.Out-Top
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.11 Air.Temperature.Out-Mid
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.12 Air.Temperature.Out-Bot
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.13 Air.Temperature.Status
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.14 Air.Temperature.Category
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.15 Air.Server-In.DescName
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.16 Air.Server-In.Setpoint
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.17 Air.Server-In.Average
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.18 Air.Server-In.SetPtHighAlarm
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.19 Air.Server-In.SetPtHighWarning
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.20 Air.Server-In.SetPtLowWarning
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.21 Air.Server-In.SetPtLowAlarm
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.22 Air.Server-In.Hysteresis
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.23 Air.Server-In.Status
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.24 Air.Server-In.Category
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.25 Air.Server-Out.DescName
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.26 Air.Server-Out.Average
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.27 Air.Server-Out.SetPtHighAlarm
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.28 Air.Server-Out.SetPtHighWarning
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.29 Air.Server-Out.SetPtLowWarning
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.30 Air.Server-Out.SetPtLowAlarm
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.31 Air.Server-Out.Hysteresis
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.32 Air.Server-Out.Status
# .1.3.6.1.4.1.2606.7.4.2.2.1.3.2.33 Air.Server-Out.Category
# 
