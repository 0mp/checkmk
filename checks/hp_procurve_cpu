#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

# Relevant SNMP OIDs:
# 1.3.6.1.4.1.11.2.14.11.5.1.9.6.1

hp_procurve_cpu_default_levels = (80, 90)

def inventory_hp_procurve_cpu(info):
    if len(info) == 1 and int(info[0][0]) >= 0 <= 100:
        return [ (None, 'hp_procurve_cpu_default_levels') ]

def check_hp_procurve_cpu(item, params, info):
    if len(info) == 1:
        cpu_util = int(info[0][0])
        if cpu_util >= 0 and cpu_util <= 100:
            status = 0
            output = ''
            if cpu_util >= params[1]:
                status = 2
                output = ' (Above %d%%)' % params[1]
            elif cpu_util >= params[0]:
                status = 1
                output = ' (Above %d%%)' % params[0]

            return (status, 'CPU utilization is %d%% %s' % (cpu_util, output),
                   [('util', '%d%%' % cpu_util, params[0], params[1], 0, 100)])

    return (3, "Invalid information in snmp data")



check_info["hp_procurve_cpu"] = {
    'check_function':          check_hp_procurve_cpu,
    'inventory_function':      inventory_hp_procurve_cpu,
    'service_description':     'CPU utilization',
    'has_perfdata':            True,
    'group':                   "cpu_utilization",
    'snmp_info':               ('.1.3.6.1.4.1.11.2.14.11.5.1.9.6', ['1']),
    'snmp_scan_function':      \
     lambda oid: ".11.2.3.7.11" in oid(".1.3.6.1.2.1.1.2.0") \
              or ".11.2.3.7.8"  in oid(".1.3.6.1.2.1.1.2.0"),
}
