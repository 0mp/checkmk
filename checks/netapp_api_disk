#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de


# Agent output:
# <<<netapp_api_disk:sep(9)>>>
# [config_instance]       disk-list-info
# disk-detail-info
# disk-uid        2000B452:53C3890F:00000000:00000000:00000000:00000000:00000000:00000000:00000000:00000000
# raid-state      spare
# bay     13
# used-space      587202560000
# physical-space  587421536256
# shelf   2
# serial-number   6SL94Q9C0000N5055GAW
# disk-detail-info
# disk-uid        2000B452:53C3893E:00000000:00000000:00000000:00000000:00000000:00000000:00000000:00000000
# raid-state      spare
# ...
# shelf-uid-instance
# shelf-uid       50:05:0c:c0:02:20:9a:7c
# disks   2040000C:CA1016C4:00000000:00000000:00000000:00000000:00000000:00000000:00000000:00000000 ...

def inventory_netapp_api_disk_summary(info):
    return [ (None, {}) ]

def check_netapp_api_disk_summary(_no_item, params, info):
    disks_info = netapp_api_convert_info(info,
                        configs = {"disk-list-info":      {"block-name": "disk-detail-info",
                                                           "key": "disk-uid"},
                                   "shelf-uids-of-disks": {"block-name": "shelf-uid-instance",
                                                           "key": "shelf-uid"}})

    # Convert legacy levels
    if "broken_spare_ratio" in params:
        params = { "failed_spare_ratio": params["broken_spare_ratio"] }

    disks = disks_info.get("disk-list-info")
    shelfs = disks_info.get("shelf-uids-of-disks")

    # The device can contain disks who belongs to another filer. We only check the ones
    # belonging to this filer.
    # TODO Do we need that?
    my_disks = dict([disk for disk in disks.items() if not disk[1].get("raid-state") == "partner"])

    disk_to_shelf_map = {}
    def find_disk_shelf_uid(disk_uid):
        if not disk_to_shelf_map:
            for shelf, values in shelfs.items():
                if "disks" in values:
                    disks = values["disks"].split(" ")
                    for disk in disks:
                        disk_to_shelf_map[disk] = shelf
        return disk_to_shelf_map.get(disk_uid)

    disks_converted = []
    for did, disk in my_disks.items():
        # Collection the disk identity
        disk_info = "Serial: %s" % disk.get("serial-number")
        if "physical-space" in disk:
            disk_info += ", Size: %s" % get_bytes_human_readable(int(disk["physical-space"]))
        shelf_uid  = find_disk_shelf_uid(disk.get("disk-uid"))
        if shelf_uid:
            disk_info += " (Shelf: %s, Bay %s)" % (shelf_uid, disk.get("bay"))
        disk['identifier'] = disk_info
        disk['type'] = False
        raid_type  = disk.get("raid-type")
        raid_state = disk.get("raid-state")
        if raid_state  == "broken":
            disk['state'] = 'failed'
        elif disk.get("prefailed", "false") not in [ "false", "None" ]:
            disk['state'] = 'prefailed'
            if raid_type in ["parity", "dparity"]:
                disk['type'] = 'parity'
            elif raid_type == "data":
                disk['type'] = 'data'
        elif raid_state == "spare":
            disk['state'] = "spare"
        else:
            disk['state'] = 'ok'
        disk['capacity'] = int(disk['used-space'])

        disks_converted.append(disk)

    return check_filer_disks(disks_converted, params)


check_info["netapp_api_disk.summary"] = {
    'check_function'          : check_netapp_api_disk_summary,
    'inventory_function'      : inventory_netapp_api_disk_summary,
    'service_description'     : 'NetApp Disks Summary',
    'group'                   : 'netapp_disks',
    'has_perfdata'            : True,
    'default_levels_variable' : 'filer_disks_default_levels',
    'includes'                : ['filerdisks.include'],
}

