#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

factory_settings['alcatel_temp'] = {
      "levels" : ( 45, 50 ),
}

def inventory_alcatel_temp(info):
    with_slot = True
    if len(info) == 1:
        with_slot = False
    for index in range(len(info)):
        slot = index + 1
        for oid, name in enumerate(["Board", "CPU"]):
            if info[index][oid] != '0':
                if with_slot:
                    yield "Slot %s %s" % (slot, name), {}
	        else:
                    yield name, {}

def check_alcatel_temp(item, params, info):
    if len(info) == 1:
        slot_index = 0
    else:
        slot = int(item.split()[1])
        slot_index = slot - 1
    sensor = item.split()[-1]
    items = { "Board" : 0, "CPU": 1 }
    try:
        # If multiple switches are staked and one of them are
        # not reachable, prevent a exception
        temp_celsius = int(info[slot_index][items[sensor]])
    except:
        return 3, "Sensor not found"
    return check_temperature(temp_celsius, params)

check_info["alcatel_temp"] = {
    "check_function"          : check_alcatel_temp,
    "inventory_function"      : inventory_alcatel_temp,
    "service_description"     : "Temperature %s",
    "group"                   : "temperature",
    "default_levels_variable" : "alcatel_temp",
    "has_perfdata"            : True,
    "snmp_scan_function"      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.6486.800"),
    "snmp_info"               : (".1.3.6.1.4.1.6486.800.1.1.1.3.1.1.3.1", [
                                                                              4, # chasHardwareBoardTemp
                                                                              5, # chasHardwareCpuTemp
                                                                         ]),
    "includes"                : [ "temperature.include" ],
}
