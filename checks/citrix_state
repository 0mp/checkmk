#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


#   .--Controller----------------------------------------------------------.
#   |             ____            _             _ _                        |
#   |            / ___|___  _ __ | |_ _ __ ___ | | | ___ _ __              |
#   |           | |   / _ \| '_ \| __| '__/ _ \| | |/ _ \ '__|             |
#   |           | |__| (_) | | | | |_| | | (_) | | |  __/ |                |
#   |            \____\___/|_| |_|\__|_|  \___/|_|_|\___|_|                |
#   |                                                                      |
#   '----------------------------------------------------------------------'

def inventory_citrix_state_controller(info):
    for line in info:
        if line[0] == "Controller":
            return [ (None, None) ]


def check_citrix_state_controller(_no_item, _no_params, info):
    for line in info:
        if line[0] == "Controller":
            return 0, line[1]


check_info["citrix_state.controller"] = {
    "inventory_function"    : inventory_citrix_state_controller,
    "check_function"        : check_citrix_state_controller,
    "service_description"   : "Citrix Controller",
}

#.
#   .--Hosting Server------------------------------------------------------.
#   | _   _           _   _               ____                             |
#   || | | | ___  ___| |_(_)_ __   __ _  / ___|  ___ _ ____   _____ _ __   |
#   || |_| |/ _ \/ __| __| | '_ \ / _` | \___ \ / _ \ '__\ \ / / _ \ '__|  |
#   ||  _  | (_) \__ \ |_| | | | | (_| |  ___) |  __/ |   \ V /  __/ |     |
#   ||_| |_|\___/|___/\__|_|_| |_|\__, | |____/ \___|_|    \_/ \___|_|     |
#   |                             |___/                                    |
#   '----------------------------------------------------------------------'

def inventory_citrix_state_hosting_server(info):
    for line in info:
        if line[0] == "HostingServer":
            return [ (None, None) ]


def check_citrix_state_hosting_server(_no_item, _no_params, info):
    for line in info:
        if line[0] == "HostingServer":
            yield 0, line[1]


check_info["citrix_state.hosting_server"] = {
    "inventory_function"    : inventory_citrix_state_hosting_server,
    "check_function"        : check_citrix_state_hosting_server,
    "service_description"   : "Citrix Hosting Server",
}

#.
##   .--Catalog-------------------------------------------------------------.
##   |                   ____      _        _                               |
##   |                  / ___|__ _| |_ __ _| | ___   __ _                   |
##   |                 | |   / _` | __/ _` | |/ _ \ / _` |                  |
##   |                 | |__| (_| | || (_| | | (_) | (_| |                  |
##   |                  \____\__,_|\__\__,_|_|\___/ \__, |                  |
##   |                                              |___/                   |
##   '----------------------------------------------------------------------'
#
#def inventory_citrix_state_catalog(info):
#    for line in info:
#        if line[0] == "Catalog":
#            return [ (None, None) ]
#
#
#def check_citrix_state_catalog(_no_item, _no_params, info):
#    for line in info:
#        if line[0] == "Catalog":
#            return 0, " ".join(line[1:])
#
#
#check_info["citrix_state.catalog"] = {
#    "inventory_function"    : inventory_citrix_state_catalog,
#    "check_function"        : check_citrix_state_catalog,
#    "service_description"   : "Citrix Catalog",
#}
#
##.
#   .--State---------------------------------------------------------------.
#   |                       ____  _        _                               |
#   |                      / ___|| |_ __ _| |_ ___                         |
#   |                      \___ \| __/ _` | __/ _ \                        |
#   |                       ___) | || (_| | ||  __/                        |
#   |                      |____/ \__\__,_|\__\___|                        |
#   |                                                                      |
#   '----------------------------------------------------------------------'

def inventory_citrix_state(info):
    if info:
        return [ (None, {}) ]


def check_citrix_state(_no_item, params, info):

    statedict = { "maintenancemode"     : { "False" : 0,
                                            "True"  : 1,
                                        },
                  "powerstate"          : { "Unmanaged"     : 1,
                                            "Unknown"       : 1,
                                            "Unavailable"   : 2,
                                            "Off"           : 2,
                                            "On"            : 0,
                                            "Suspended"     : 2,
                                            "TurningOn"     : 1,
                                            "TurningOff"    : 1,
                                        },
                  "vmtoolsstate"        : { "NotPresent"    : 2,
                                            "Unknown"       : 3,
                                            "NotStarted"    : 1,
                                            "Running"       : 0,
                                        },
                  "registrationstate"   : { "Unregistered"  : 2,
                                            "Initializing"  : 1,
                                            "Registered"    : 0,
                                            "AgentError"    : 2,
                                        },
                  "faultstate"          : { "None"          : 0,
                                            "FailedToStart" : 2,
                                            "StuckOnBoot"   : 2,
                                            "Unregistered"  : 2,
                                            "MaxCapacity"   : 1,
                                        },
    }

    statedict.update(params)

    for line in info:
        for what in statedict:
            if line[0].lower() == what:
                yield statedict[what][line[1]], line[0] + ": " + line[1]


check_info["citrix_state"] = {
    "inventory_function"        : inventory_citrix_state,
    "check_function"            : check_citrix_state,
    "service_description"       : "Citrix Instance State",
    "group"                     : "citrix_state",
}
