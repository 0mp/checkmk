#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# Copyright by Mathias Kettner and Mathias Kettner GmbH.  All rights reserved.
#
# Check_MK is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.
#
# Check_MK is  distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have  received  a copy of the  GNU  General Public
# License along with Check_MK.  If  not, email to mk@mathias-kettner.de
# or write to the postal address provided at www.mathias-kettner.de

factory_settings["brocade_mlx_temperature_default_levels"] = {
    "levels" : (105, 110)
}

def parse_brocade_mlx_temp(info):
    parsed = {}
    for temp_descr, temp_value in info:
        if temp_value and temp_value != '0':
            item = temp_descr.replace("temperature", "")\
                    .replace("module", "Module")\
                    .replace("sensor", "Sensor")\
                    .replace(",", "")\
                    .strip()
            parsed[item] = float(temp_value) * 0.5
    return parsed


def inventory_brocade_mlx_temp(parsed):
    for item in parsed:
        yield item, {}


def check_brocade_mlx_temp(item, params, parsed):
    if item in parsed:
        return check_temperature(parsed[item], params)


check_info["brocade_mlx_temp"] = {
    "parse_function"          : parse_brocade_mlx_temp,
    "check_function"          : check_brocade_mlx_temp,
    "inventory_function"      : inventory_brocade_mlx_temp,
    "service_description"     : "Temperature %s",
    "snmp_info"               : ('.1.3.6.1.4.1.1991.1.1.2.13.1.1', [ 3, 4 ]), # descr, temperature
    "snmp_scan_function"      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.1991.1."),
    "has_perfdata"            : True,
    "default_levels_variable" : "brocade_mlx_temperature_default_levels",
    "group"                   : "temperature",
    "includes"                : [ "temperature.include" ],
}
