#!/usr/bin/python
# encoding: utf-8
import sys

# Beispiel f√ºr Kommandozeile
# agent_vsphere -p 4711 -C hostsystem,virtualmachine -u 'mrwatson' -s '(W*$JFMV(W' 'srv123'
# Auswerten mit getopt.


from pysphere import VIServer, VIProperty, MORTypes
from pysphere.resources import VimService_services as VI

host = VIServer()
host.connect(server, access[server][0], access[server][1])

def output_mors(what, properties): 
    if what == "hostsystem":
        obj_type = MORTypes.HostSystem
    else:
        obj_type = MORTypes.VirtualMachine
    
    for mor in host._retrieve_properties_traversal(property_names=properties.keys, obj_type=obj_type):
        # Parse result into a dictionary. Key is the property name,
        # value is the value (some custom Python classes)
        data = {}
        for p in mor.PropSet:
            # Convert property value using specified conversion function
            data[mor.Obj][p.Name] = properties[p.Name](p.Val)

        # Get the name of this Host/VirtualMachine
        name = data["name"]

        # Output multiplexed Check_MK Agent output (new in version 1.2.3i1)
        print '<<<<%s>>>>' % name
        print '<<<esx_vsphere_%s>>>' % what
        for name, value in data.items():
            print '%s %s' % (name, value)


def conv_multipath(value):
    return " ".join(["%s %s" % (p.Name, p.PathState) for p in value.value.HostMultipathStateInfoPath])



if ... in ...:
output_mors("hostsystem", {
  "name": str,
  "overallStatus": str,
  "summary.quickStats.overallCpuUsage": str,
  "summary.quickStats.overallMemoryUsage":     str,
  "summary.quickStats.uptime": str,
  "runtime.powerState": str,
  "runtime.inMaintenanceMode": str,
  "hardware.memorySize": str,
  "hardware.cpuInfo.numCpuCores": str,
  "hardware.cpuInfo.numCpuPackages": str,
  "hardware.cpuInfo.numCpuThreads": str,
  "config.multipathState.path": conv_multipath,
})

if ... in ...:
output_mors("virtualmachine", {
 "name": str,
 "guestHeartbeatStatus": str,
 "summary.quickStats.overallCpuUsage": str,
 "summary.quickStats.uptimeSeconds": str,
 "summary.quickStats.guestMemoryUsage": str,
 "summary.quickStats.hostMemoryUsage": str,
 "summary.quickStats.overallCpuUsage": str,
 "summary.runtime.powerState": str,
 "config.hardware.memoryMB": str,
 "config.hardware.numCPU": str,
})



host.disconnect()
